{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\my-portfolio-main\\\\src\\\\components\\\\ThreePerson.js\",\n  _s = $RefreshSig$();\n// src/components/ThreePerson.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFExporter } from \"three/examples/jsm/exporters/GLTFExporter.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreePerson() {\n  _s();\n  const mountRef = useRef(null);\n  const [exporting, setExporting] = useState(false);\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth || 480;\n    const height = mount.clientHeight || 480;\n\n    // Scene, camera, renderer\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xe8f7ff);\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n    camera.position.set(0, 1.6, 3.2);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mount.appendChild(renderer.domElement);\n\n    // Environment (simple HDR-like via large soft light + rim)\n    const hemi = new THREE.HemisphereLight(0xffffff, 0x444466, 0.6);\n    scene.add(hemi);\n    const dir = new THREE.DirectionalLight(0xffffff, 0.9);\n    dir.position.set(5, 8, 3);\n    dir.castShadow = true;\n    dir.shadow.mapSize.set(2048, 2048);\n    dir.shadow.camera.left = -5;\n    dir.shadow.camera.right = 5;\n    dir.shadow.camera.top = 5;\n    dir.shadow.camera.bottom = -5;\n    scene.add(dir);\n\n    // ground (receives shadow)\n    const groundMat = new THREE.MeshStandardMaterial({\n      color: 0xe6f2f9,\n      metalness: 0,\n      roughness: 1\n    });\n    const ground = new THREE.Mesh(new THREE.PlaneGeometry(20, 20), groundMat);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = -1.15;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Character group\n    const char = new THREE.Group();\n    scene.add(char);\n\n    // Materials (PBR-ish)\n    const bodyMat = new THREE.MeshStandardMaterial({\n      color: 0x00bcd4,\n      metalness: 0.1,\n      roughness: 0.55\n    });\n    const skinMat = new THREE.MeshStandardMaterial({\n      color: 0xffe0f0,\n      metalness: 0,\n      roughness: 0.7\n    });\n    const hatMat = new THREE.MeshStandardMaterial({\n      color: 0xb39ddb,\n      metalness: 0.05,\n      roughness: 0.6\n    });\n    const pantMat = new THREE.MeshStandardMaterial({\n      color: 0x26418f,\n      metalness: 0.05,\n      roughness: 0.6\n    });\n    const bootMat = new THREE.MeshStandardMaterial({\n      color: 0x00bcd4,\n      metalness: 0.1,\n      roughness: 0.4\n    });\n    const blackMat = new THREE.MeshBasicMaterial({\n      color: 0x111111\n    });\n\n    // --- Build smooth character parts (rounded shapes) ---\n\n    // torso as capsule (approximate smooth jelly)\n    const torsoGeo = new THREE.CapsuleGeometry(0.36, 0.78, 8, 24);\n    const torso = new THREE.Mesh(torsoGeo, bodyMat);\n    torso.position.y = 0.45;\n    torso.castShadow = true;\n    torso.receiveShadow = true;\n    char.add(torso);\n\n    // head sphere\n    const head = new THREE.Mesh(new THREE.SphereGeometry(0.32, 32, 24), skinMat);\n    head.position.y = 1.4;\n    head.castShadow = true;\n    char.add(head);\n\n    // hat: brim + top\n    const hatBrim = new THREE.Mesh(new THREE.TorusGeometry(0.36, 0.045, 16, 60), hatMat);\n    hatBrim.rotation.x = Math.PI / 2;\n    hatBrim.position.y = 1.65;\n    char.add(hatBrim);\n    const hatTop = new THREE.Mesh(new THREE.CylinderGeometry(0.28, 0.28, 0.24, 32), hatMat);\n    hatTop.position.y = 1.78;\n    char.add(hatTop);\n\n    // hair \"curtain\" front (a smooth extrude: approximated by lathed geometry)\n    const hairShape = new THREE.Shape();\n    hairShape.moveTo(-0.28, 0);\n    hairShape.quadraticCurveTo(-0.15, -0.7, 0, -0.75);\n    hairShape.quadraticCurveTo(0.15, -0.7, 0.28, 0);\n    const extrudeSettings = {\n      depth: 0.12,\n      bevelEnabled: false\n    };\n    const hairGeo = new THREE.ExtrudeGeometry(hairShape, extrudeSettings);\n    hairGeo.rotateX(-Math.PI / 2);\n    hairGeo.translate(0, 1.35, 0.04);\n    const hairMat = new THREE.MeshStandardMaterial({\n      color: 0x00bcd4,\n      metalness: 0.05,\n      roughness: 0.5\n    });\n    const hair = new THREE.Mesh(hairGeo, hairMat);\n    hair.castShadow = true;\n    char.add(hair);\n\n    // eyes: black flattened spheres\n    const eyeL = new THREE.Mesh(new THREE.SphereGeometry(0.04, 12, 12), blackMat);\n    eyeL.position.set(-0.08, 1.47, 0.28);\n    const eyeR = eyeL.clone();\n    eyeR.position.x = 0.08;\n    char.add(eyeL, eyeR);\n\n    // eyelashes (thin rectangles as planes)\n    function addLash(x) {\n      const lashGeo = new THREE.PlaneGeometry(0.06, 0.02);\n      const lash = new THREE.Mesh(lashGeo, blackMat);\n      lash.position.set(x, 1.52, 0.29);\n      lash.rotation.y = 0.0;\n      lash.rotation.x = -0.3;\n      char.add(lash);\n    }\n    addLash(-0.09);\n    addLash(-0.03);\n    addLash(0.03);\n    addLash(0.09);\n\n    // mouth (small arc made with curve points -> Line)\n    const mouthPts = [];\n    for (let i = 0; i <= 10; i++) {\n      const a = -0.4 + i / 10 * 0.8;\n      mouthPts.push(new THREE.Vector3(Math.sin(a) * 0.06, 1.37 - Math.abs(a) * 0.01, 0.28));\n    }\n    const mouthGeo = new THREE.BufferGeometry().setFromPoints(mouthPts);\n    const mouth = new THREE.Line(mouthGeo, new THREE.LineBasicMaterial({\n      color: 0x111111,\n      linewidth: 2\n    }));\n    char.add(mouth);\n\n    // arms (capsules)\n    const armGeo = new THREE.CapsuleGeometry(0.08, 0.46, 6, 12);\n    const leftArm = new THREE.Mesh(armGeo, bodyMat);\n    leftArm.position.set(-0.5, 0.95, 0);\n    leftArm.rotation.z = 0.25;\n    leftArm.castShadow = true;\n    const rightArm = leftArm.clone();\n    rightArm.position.x = 0.5;\n    rightArm.rotation.z = -0.25;\n    char.add(leftArm, rightArm);\n\n    // pants + legs + boots\n    const pants = new THREE.Mesh(new THREE.CylinderGeometry(0.22, 0.22, 0.34, 24), pantMat);\n    pants.position.y = 0.0;\n    pants.castShadow = true;\n    char.add(pants);\n    function makeLeg(x) {\n      const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.10, 0.10, 0.36, 12), pantMat);\n      leg.position.set(x, -0.18, 0);\n      leg.castShadow = true;\n      const boot = new THREE.Mesh(new THREE.CapsuleGeometry(0.13, 0.06, 6, 12), bootMat);\n      boot.position.set(x, -0.46, 0.06);\n      boot.castShadow = true;\n      const trim = new THREE.Mesh(new THREE.TorusGeometry(0.14, 0.02, 8, 32), hatMat);\n      trim.position.set(x, -0.30, 0.06);\n      trim.rotation.x = Math.PI / 2;\n      return [leg, boot, trim];\n    }\n    const [legL, bootL, trimL] = makeLeg(-0.13);\n    const [legR, bootR, trimR] = makeLeg(0.13);\n    char.add(legL, bootL, trimL, legR, bootR, trimR);\n\n    // belt (torus) + small pouch (sphere)\n    const belt = new THREE.Mesh(new THREE.TorusGeometry(0.28, 0.03, 12, 32), new THREE.MeshStandardMaterial({\n      color: 0x00bcd4\n    }));\n    belt.rotation.x = Math.PI / 2;\n    belt.position.y = 0.32;\n    char.add(belt);\n    const pouch = new THREE.Mesh(new THREE.SphereGeometry(0.06, 12, 12), hatMat);\n    pouch.position.set(0.18, 0.32, 0.08);\n    char.add(pouch);\n\n    // --- end character construction ---\n\n    // subtle rim light (fake) via point lights\n    const rim = new THREE.PointLight(0xb6d7ff, 0.25, 6);\n    rim.position.set(-2, 2, -1);\n    scene.add(rim);\n\n    // Animation (idle bob + gentle arm motion)\n    const clock = new THREE.Clock();\n    let req;\n    function animate() {\n      const t = clock.getElapsedTime();\n      char.position.y = Math.sin(t * 1.8) * 0.04; // bob\n      char.rotation.y = Math.sin(t * 0.5) * 0.08; // sway\n      leftArm.rotation.x = Math.sin(t * 2) * 0.18 + 0.25;\n      rightArm.rotation.x = Math.sin(t * 2 + Math.PI) * 0.18 - 0.25;\n      renderer.render(scene, camera);\n      req = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // handle resize\n    function onResize() {\n      const w = mount.clientWidth || 480;\n      const h = mount.clientHeight || 480;\n      camera.aspect = w / h;\n      camera.updateProjectionMatrix();\n      renderer.setSize(w, h);\n    }\n    window.addEventListener(\"resize\", onResize);\n\n    // --- Export GLB helper (exposed via window for demo, real export uses GLTFExporter below) ---\n    // cleanup on unmount\n    return () => {\n      cancelAnimationFrame(req);\n      window.removeEventListener(\"resize\", onResize);\n      renderer.dispose();\n      // dispose geometries & materials\n      scene.traverse(o => {\n        if (o.isMesh) {\n          if (o.geometry) o.geometry.dispose();\n          if (o.material) {\n            if (Array.isArray(o.material)) o.material.forEach(m => m.dispose());else o.material.dispose();\n          }\n        }\n      });\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  // Exporter function: export assembled character group into glb and force download\n  const handleExport = () => {\n    if (!mountRef.current) return;\n    setExporting(true);\n    // We need to reconstruct same scene graph as in effect â€” easiest: serialize the current canvas scene\n    // Approach: Find scene from renderer via dom element (hack: store scene object onto dom or global)\n    // But we didn't keep references outside effect; so re-create character quickly and export same geometry.\n    // For reliability we re-create a minimal character object identical to runtime (same geometry & materials).\n    const exporter = new GLTFExporter();\n\n    // Helper: build the same character group used above (but without lights/renderer)\n    const buildExportChar = () => {\n      const group = new THREE.Group();\n      const bodyMat = new THREE.MeshStandardMaterial({\n        color: 0x00bcd4\n      });\n      const skinMat = new THREE.MeshStandardMaterial({\n        color: 0xffe0f0\n      });\n      const hatMat = new THREE.MeshStandardMaterial({\n        color: 0xb39ddb\n      });\n      const pantMat = new THREE.MeshStandardMaterial({\n        color: 0x26418f\n      });\n      const bootMat = new THREE.MeshStandardMaterial({\n        color: 0x00bcd4\n      });\n      const blackMat = new THREE.MeshBasicMaterial({\n        color: 0x111111\n      });\n      const torso = new THREE.Mesh(new THREE.CapsuleGeometry(0.36, 0.78, 8, 24), bodyMat);\n      torso.position.y = 0.45;\n      group.add(torso);\n      const head = new THREE.Mesh(new THREE.SphereGeometry(0.32, 32, 24), skinMat);\n      head.position.y = 1.4;\n      group.add(head);\n      const hatBrim = new THREE.Mesh(new THREE.TorusGeometry(0.36, 0.045, 16, 60), hatMat);\n      hatBrim.rotation.x = Math.PI / 2;\n      hatBrim.position.y = 1.65;\n      group.add(hatBrim);\n      const hatTop = new THREE.Mesh(new THREE.CylinderGeometry(0.28, 0.28, 0.24, 32), hatMat);\n      hatTop.position.y = 1.78;\n      group.add(hatTop);\n\n      // Fix: Correct hair shape construction\n      const hairShape = new THREE.Shape();\n      hairShape.moveTo(-0.28, 0);\n      hairShape.quadraticCurveTo(-0.15, -0.7, 0, -0.75);\n      hairShape.quadraticCurveTo(0.15, -0.7, 0.28, 0);\n      const extrudeSettings = {\n        depth: 0.12,\n        bevelEnabled: false\n      };\n      const hairGeo = new THREE.ExtrudeGeometry(hairShape, extrudeSettings);\n      hairGeo.rotateX(-Math.PI / 2);\n      hairGeo.translate(0, 1.35, 0.04);\n      const hair = new THREE.Mesh(hairGeo, bodyMat);\n      group.add(hair);\n      const eyeL = new THREE.Mesh(new THREE.SphereGeometry(0.04, 12, 12), blackMat);\n      eyeL.position.set(-0.08, 1.47, 0.28);\n      const eyeR = eyeL.clone();\n      eyeR.position.x = 0.08;\n      group.add(eyeL, eyeR);\n\n      // mouth: replace Line with thin mesh for better GLTF compatibility\n      const mouthGeo = new THREE.TubeGeometry(new THREE.CatmullRomCurve3(mouthPts), 10, 0.005, 8, false);\n      const mouth = new THREE.Mesh(mouthGeo, blackMat);\n      group.add(mouth);\n\n      // arms, legs, boots similar to runtime\n      const armGeo = new THREE.CapsuleGeometry(0.08, 0.46, 6, 12);\n      const leftArm = new THREE.Mesh(armGeo, bodyMat);\n      leftArm.position.set(-0.5, 0.95, 0);\n      leftArm.rotation.z = 0.25;\n      const rightArm = leftArm.clone();\n      rightArm.position.x = 0.5;\n      rightArm.rotation.z = -0.25;\n      group.add(leftArm, rightArm);\n      const pants = new THREE.Mesh(new THREE.CylinderGeometry(0.22, 0.22, 0.34, 24), pantMat);\n      pants.position.y = 0.0;\n      group.add(pants);\n      const makeLeg = x => {\n        const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.10, 0.10, 0.36, 12), pantMat);\n        leg.position.set(x, -0.18, 0);\n        const boot = new THREE.Mesh(new THREE.CapsuleGeometry(0.13, 0.06, 6, 12), bootMat);\n        boot.position.set(x, -0.46, 0.06);\n        const trim = new THREE.Mesh(new THREE.TorusGeometry(0.14, 0.02, 8, 32), hatMat);\n        trim.position.set(x, -0.30, 0.06);\n        trim.rotation.x = Math.PI / 2;\n        return [leg, boot, trim];\n      };\n      const [l1, l2, l3] = makeLeg(-0.13);\n      const [r1, r2, r3] = makeLeg(0.13);\n      group.add(l1, l2, l3, r1, r2, r3);\n      const belt = new THREE.Mesh(new THREE.TorusGeometry(0.28, 0.03, 12, 32), bodyMat);\n      belt.rotation.x = Math.PI / 2;\n      belt.position.y = 0.32;\n      group.add(belt);\n      const pouch = new THREE.Mesh(new THREE.SphereGeometry(0.06, 12, 12), hatMat);\n      pouch.position.set(0.18, 0.32, 0.08);\n      group.add(pouch);\n      return group;\n    };\n    const charObj = buildExportChar();\n\n    // Export to glb\n    exporter.parse(charObj, glb => {\n      // glb is ArrayBuffer when options.binary = true\n      const blob = new Blob([glb], {\n        type: \"model/gltf-binary\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"character.glb\";\n      a.click();\n      URL.revokeObjectURL(url);\n      setExporting(false);\n    }, error => {\n      console.error(\"GLTF export error:\", error);\n      setExporting(false);\n    }, {\n      binary: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      gap: 12,\n      alignItems: \"flex-start\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: 360,\n        height: 480,\n        borderRadius: 16,\n        boxShadow: \"0 8px 30px rgba(0,0,0,0.12)\",\n        overflow: \"hidden\",\n        background: \"#eaf7ff\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExport,\n        disabled: exporting,\n        style: {\n          padding: \"8px 12px\",\n          borderRadius: 8\n        },\n        children: exporting ? \"Exporting...\" : \"Export GLB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: 220,\n          fontSize: 13,\n          color: \"#333\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Tips:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            marginTop: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Click \\\"Export GLB\\\" to download the model file \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"character.glb\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 63\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Drop \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"character.glb\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 22\n            }, this), \" into \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"public/models/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 54\n            }, this), \" and load with useGLTF in React Three Fiber.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"If you want rigged skeleton for animations, tell me \\u2014 I can produce a skinned export next.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreePerson, \"vp9NpFUphjIQ0aSwK7rD+9utfBo=\");\n_c = ThreePerson;\nvar _c;\n$RefreshReg$(_c, \"ThreePerson\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","GLTFExporter","jsxDEV","_jsxDEV","ThreePerson","_s","mountRef","exporting","setExporting","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","setSize","setPixelRatio","Math","min","window","devicePixelRatio","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","hemi","HemisphereLight","add","dir","DirectionalLight","castShadow","shadow","mapSize","left","right","top","bottom","groundMat","MeshStandardMaterial","color","metalness","roughness","ground","Mesh","PlaneGeometry","rotation","x","PI","y","receiveShadow","char","Group","bodyMat","skinMat","hatMat","pantMat","bootMat","blackMat","MeshBasicMaterial","torsoGeo","CapsuleGeometry","torso","head","SphereGeometry","hatBrim","TorusGeometry","hatTop","CylinderGeometry","hairShape","Shape","moveTo","quadraticCurveTo","extrudeSettings","depth","bevelEnabled","hairGeo","ExtrudeGeometry","rotateX","translate","hairMat","hair","eyeL","eyeR","clone","addLash","lashGeo","lash","mouthPts","i","a","push","Vector3","sin","abs","mouthGeo","BufferGeometry","setFromPoints","mouth","Line","LineBasicMaterial","linewidth","armGeo","leftArm","z","rightArm","pants","makeLeg","leg","boot","trim","legL","bootL","trimL","legR","bootR","trimR","belt","pouch","rim","PointLight","clock","Clock","req","animate","t","getElapsedTime","render","requestAnimationFrame","onResize","w","h","aspect","updateProjectionMatrix","addEventListener","cancelAnimationFrame","removeEventListener","dispose","traverse","o","isMesh","geometry","material","Array","isArray","forEach","m","removeChild","handleExport","exporter","buildExportChar","group","TubeGeometry","CatmullRomCurve3","l1","l2","l3","r1","r2","r3","charObj","parse","glb","blob","Blob","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","error","console","binary","style","display","gap","alignItems","children","ref","borderRadius","boxShadow","overflow","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","onClick","disabled","padding","maxWidth","fontSize","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/my-portfolio-main/src/components/ThreePerson.js"],"sourcesContent":["// src/components/ThreePerson.js\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { GLTFExporter } from \"three/examples/jsm/exporters/GLTFExporter.js\";\r\n\r\nexport default function ThreePerson() {\r\n  const mountRef = useRef(null);\r\n  const [exporting, setExporting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const mount = mountRef.current;\r\n    if (!mount) return;\r\n\r\n    const width = mount.clientWidth || 480;\r\n    const height = mount.clientHeight || 480;\r\n\r\n    // Scene, camera, renderer\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xe8f7ff);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\r\n    camera.position.set(0, 1.6, 3.2);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    mount.appendChild(renderer.domElement);\r\n\r\n    // Environment (simple HDR-like via large soft light + rim)\r\n    const hemi = new THREE.HemisphereLight(0xffffff, 0x444466, 0.6);\r\n    scene.add(hemi);\r\n\r\n    const dir = new THREE.DirectionalLight(0xffffff, 0.9);\r\n    dir.position.set(5, 8, 3);\r\n    dir.castShadow = true;\r\n    dir.shadow.mapSize.set(2048, 2048);\r\n    dir.shadow.camera.left = -5;\r\n    dir.shadow.camera.right = 5;\r\n    dir.shadow.camera.top = 5;\r\n    dir.shadow.camera.bottom = -5;\r\n    scene.add(dir);\r\n\r\n    // ground (receives shadow)\r\n    const groundMat = new THREE.MeshStandardMaterial({ color: 0xe6f2f9, metalness: 0, roughness: 1 });\r\n    const ground = new THREE.Mesh(new THREE.PlaneGeometry(20, 20), groundMat);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = -1.15;\r\n    ground.receiveShadow = true;\r\n    scene.add(ground);\r\n\r\n    // Character group\r\n    const char = new THREE.Group();\r\n    scene.add(char);\r\n\r\n    // Materials (PBR-ish)\r\n    const bodyMat = new THREE.MeshStandardMaterial({ color: 0x00bcd4, metalness: 0.1, roughness: 0.55 });\r\n    const skinMat = new THREE.MeshStandardMaterial({ color: 0xffe0f0, metalness: 0, roughness: 0.7 });\r\n    const hatMat = new THREE.MeshStandardMaterial({ color: 0xb39ddb, metalness: 0.05, roughness: 0.6 });\r\n    const pantMat = new THREE.MeshStandardMaterial({ color: 0x26418f, metalness: 0.05, roughness: 0.6 });\r\n    const bootMat = new THREE.MeshStandardMaterial({ color: 0x00bcd4, metalness: 0.1, roughness: 0.4 });\r\n    const blackMat = new THREE.MeshBasicMaterial({ color: 0x111111 });\r\n\r\n    // --- Build smooth character parts (rounded shapes) ---\r\n\r\n    // torso as capsule (approximate smooth jelly)\r\n    const torsoGeo = new THREE.CapsuleGeometry(0.36, 0.78, 8, 24);\r\n    const torso = new THREE.Mesh(torsoGeo, bodyMat);\r\n    torso.position.y = 0.45;\r\n    torso.castShadow = true;\r\n    torso.receiveShadow = true;\r\n    char.add(torso);\r\n\r\n    // head sphere\r\n    const head = new THREE.Mesh(new THREE.SphereGeometry(0.32, 32, 24), skinMat);\r\n    head.position.y = 1.4;\r\n    head.castShadow = true;\r\n    char.add(head);\r\n\r\n    // hat: brim + top\r\n    const hatBrim = new THREE.Mesh(new THREE.TorusGeometry(0.36, 0.045, 16, 60), hatMat);\r\n    hatBrim.rotation.x = Math.PI / 2;\r\n    hatBrim.position.y = 1.65;\r\n    char.add(hatBrim);\r\n\r\n    const hatTop = new THREE.Mesh(new THREE.CylinderGeometry(0.28, 0.28, 0.24, 32), hatMat);\r\n    hatTop.position.y = 1.78;\r\n    char.add(hatTop);\r\n\r\n    // hair \"curtain\" front (a smooth extrude: approximated by lathed geometry)\r\n    const hairShape = new THREE.Shape();\r\n    hairShape.moveTo(-0.28, 0);\r\n    hairShape.quadraticCurveTo(-0.15, -0.7, 0, -0.75);\r\n    hairShape.quadraticCurveTo(0.15, -0.7, 0.28, 0);\r\n    const extrudeSettings = { depth: 0.12, bevelEnabled: false };\r\n    const hairGeo = new THREE.ExtrudeGeometry(hairShape, extrudeSettings);\r\n    hairGeo.rotateX(-Math.PI / 2);\r\n    hairGeo.translate(0, 1.35, 0.04);\r\n    const hairMat = new THREE.MeshStandardMaterial({ color: 0x00bcd4, metalness: 0.05, roughness: 0.5 });\r\n    const hair = new THREE.Mesh(hairGeo, hairMat);\r\n    hair.castShadow = true;\r\n    char.add(hair);\r\n\r\n    // eyes: black flattened spheres\r\n    const eyeL = new THREE.Mesh(new THREE.SphereGeometry(0.04, 12, 12), blackMat);\r\n    eyeL.position.set(-0.08, 1.47, 0.28);\r\n    const eyeR = eyeL.clone();\r\n    eyeR.position.x = 0.08;\r\n    char.add(eyeL, eyeR);\r\n\r\n    // eyelashes (thin rectangles as planes)\r\n    function addLash(x) {\r\n      const lashGeo = new THREE.PlaneGeometry(0.06, 0.02);\r\n      const lash = new THREE.Mesh(lashGeo, blackMat);\r\n      lash.position.set(x, 1.52, 0.29);\r\n      lash.rotation.y = 0.0;\r\n      lash.rotation.x = -0.3;\r\n      char.add(lash);\r\n    }\r\n    addLash(-0.09); addLash(-0.03); addLash(0.03); addLash(0.09);\r\n\r\n    // mouth (small arc made with curve points -> Line)\r\n    const mouthPts = [];\r\n    for (let i = 0; i <= 10; i++) {\r\n      const a = -0.4 + (i / 10) * 0.8;\r\n      mouthPts.push(new THREE.Vector3(Math.sin(a) * 0.06, 1.37 - Math.abs(a) * 0.01, 0.28));\r\n    }\r\n    const mouthGeo = new THREE.BufferGeometry().setFromPoints(mouthPts);\r\n    const mouth = new THREE.Line(mouthGeo, new THREE.LineBasicMaterial({ color: 0x111111, linewidth: 2 }));\r\n    char.add(mouth);\r\n\r\n    // arms (capsules)\r\n    const armGeo = new THREE.CapsuleGeometry(0.08, 0.46, 6, 12);\r\n    const leftArm = new THREE.Mesh(armGeo, bodyMat);\r\n    leftArm.position.set(-0.5, 0.95, 0);\r\n    leftArm.rotation.z = 0.25;\r\n    leftArm.castShadow = true;\r\n    const rightArm = leftArm.clone();\r\n    rightArm.position.x = 0.5;\r\n    rightArm.rotation.z = -0.25;\r\n    char.add(leftArm, rightArm);\r\n\r\n    // pants + legs + boots\r\n    const pants = new THREE.Mesh(new THREE.CylinderGeometry(0.22, 0.22, 0.34, 24), pantMat);\r\n    pants.position.y = 0.0;\r\n    pants.castShadow = true;\r\n    char.add(pants);\r\n\r\n    function makeLeg(x) {\r\n      const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.10, 0.10, 0.36, 12), pantMat);\r\n      leg.position.set(x, -0.18, 0);\r\n      leg.castShadow = true;\r\n\r\n      const boot = new THREE.Mesh(new THREE.CapsuleGeometry(0.13, 0.06, 6, 12), bootMat);\r\n      boot.position.set(x, -0.46, 0.06);\r\n      boot.castShadow = true;\r\n\r\n      const trim = new THREE.Mesh(new THREE.TorusGeometry(0.14, 0.02, 8, 32), hatMat);\r\n      trim.position.set(x, -0.30, 0.06);\r\n      trim.rotation.x = Math.PI / 2;\r\n\r\n      return [leg, boot, trim];\r\n    }\r\n\r\n    const [legL, bootL, trimL] = makeLeg(-0.13);\r\n    const [legR, bootR, trimR] = makeLeg(0.13);\r\n    char.add(legL, bootL, trimL, legR, bootR, trimR);\r\n\r\n    // belt (torus) + small pouch (sphere)\r\n    const belt = new THREE.Mesh(new THREE.TorusGeometry(0.28, 0.03, 12, 32), new THREE.MeshStandardMaterial({ color: 0x00bcd4 }));\r\n    belt.rotation.x = Math.PI / 2;\r\n    belt.position.y = 0.32;\r\n    char.add(belt);\r\n\r\n    const pouch = new THREE.Mesh(new THREE.SphereGeometry(0.06, 12, 12), hatMat);\r\n    pouch.position.set(0.18, 0.32, 0.08);\r\n    char.add(pouch);\r\n\r\n    // --- end character construction ---\r\n\r\n    // subtle rim light (fake) via point lights\r\n    const rim = new THREE.PointLight(0xb6d7ff, 0.25, 6);\r\n    rim.position.set(-2, 2, -1);\r\n    scene.add(rim);\r\n\r\n    // Animation (idle bob + gentle arm motion)\r\n    const clock = new THREE.Clock();\r\n    let req;\r\n    function animate() {\r\n      const t = clock.getElapsedTime();\r\n      char.position.y = Math.sin(t * 1.8) * 0.04; // bob\r\n      char.rotation.y = Math.sin(t * 0.5) * 0.08; // sway\r\n      leftArm.rotation.x = Math.sin(t * 2) * 0.18 + 0.25;\r\n      rightArm.rotation.x = Math.sin(t * 2 + Math.PI) * 0.18 - 0.25;\r\n      renderer.render(scene, camera);\r\n      req = requestAnimationFrame(animate);\r\n    }\r\n    animate();\r\n\r\n    // handle resize\r\n    function onResize() {\r\n      const w = mount.clientWidth || 480;\r\n      const h = mount.clientHeight || 480;\r\n      camera.aspect = w / h;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(w, h);\r\n    }\r\n    window.addEventListener(\"resize\", onResize);\r\n\r\n    // --- Export GLB helper (exposed via window for demo, real export uses GLTFExporter below) ---\r\n    // cleanup on unmount\r\n    return () => {\r\n      cancelAnimationFrame(req);\r\n      window.removeEventListener(\"resize\", onResize);\r\n      renderer.dispose();\r\n      // dispose geometries & materials\r\n      scene.traverse((o) => {\r\n        if (o.isMesh) {\r\n          if (o.geometry) o.geometry.dispose();\r\n          if (o.material) {\r\n            if (Array.isArray(o.material)) o.material.forEach(m => m.dispose());\r\n            else o.material.dispose();\r\n          }\r\n        }\r\n      });\r\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  // Exporter function: export assembled character group into glb and force download\r\n  const handleExport = () => {\r\n    if (!mountRef.current) return;\r\n    setExporting(true);\r\n    // We need to reconstruct same scene graph as in effect â€” easiest: serialize the current canvas scene\r\n    // Approach: Find scene from renderer via dom element (hack: store scene object onto dom or global)\r\n    // But we didn't keep references outside effect; so re-create character quickly and export same geometry.\r\n    // For reliability we re-create a minimal character object identical to runtime (same geometry & materials).\r\n    const exporter = new GLTFExporter();\r\n\r\n    // Helper: build the same character group used above (but without lights/renderer)\r\n    const buildExportChar = () => {\r\n      const group = new THREE.Group();\r\n\r\n      const bodyMat = new THREE.MeshStandardMaterial({ color: 0x00bcd4 });\r\n      const skinMat = new THREE.MeshStandardMaterial({ color: 0xffe0f0 });\r\n      const hatMat = new THREE.MeshStandardMaterial({ color: 0xb39ddb });\r\n      const pantMat = new THREE.MeshStandardMaterial({ color: 0x26418f });\r\n      const bootMat = new THREE.MeshStandardMaterial({ color: 0x00bcd4 });\r\n      const blackMat = new THREE.MeshBasicMaterial({ color: 0x111111 });\r\n\r\n      const torso = new THREE.Mesh(new THREE.CapsuleGeometry(0.36, 0.78, 8, 24), bodyMat);\r\n      torso.position.y = 0.45;\r\n      group.add(torso);\r\n\r\n      const head = new THREE.Mesh(new THREE.SphereGeometry(0.32, 32, 24), skinMat);\r\n      head.position.y = 1.4;\r\n      group.add(head);\r\n\r\n      const hatBrim = new THREE.Mesh(new THREE.TorusGeometry(0.36, 0.045, 16, 60), hatMat);\r\n      hatBrim.rotation.x = Math.PI / 2;\r\n      hatBrim.position.y = 1.65;\r\n      group.add(hatBrim);\r\n\r\n      const hatTop = new THREE.Mesh(new THREE.CylinderGeometry(0.28, 0.28, 0.24, 32), hatMat);\r\n      hatTop.position.y = 1.78;\r\n      group.add(hatTop);\r\n\r\n      // Fix: Correct hair shape construction\r\n      const hairShape = new THREE.Shape();\r\n      hairShape.moveTo(-0.28, 0);\r\n      hairShape.quadraticCurveTo(-0.15, -0.7, 0, -0.75);\r\n      hairShape.quadraticCurveTo(0.15, -0.7, 0.28, 0);\r\n      const extrudeSettings = { depth: 0.12, bevelEnabled: false };\r\n      const hairGeo = new THREE.ExtrudeGeometry(hairShape, extrudeSettings);\r\n      hairGeo.rotateX(-Math.PI / 2);\r\n      hairGeo.translate(0, 1.35, 0.04);\r\n      const hair = new THREE.Mesh(hairGeo, bodyMat);\r\n      group.add(hair);\r\n\r\n      const eyeL = new THREE.Mesh(new THREE.SphereGeometry(0.04, 12, 12), blackMat);\r\n      eyeL.position.set(-0.08, 1.47, 0.28);\r\n      const eyeR = eyeL.clone();\r\n      eyeR.position.x = 0.08;\r\n      group.add(eyeL, eyeR);\r\n\r\n      // mouth: replace Line with thin mesh for better GLTF compatibility\r\n      const mouthGeo = new THREE.TubeGeometry(\r\n        new THREE.CatmullRomCurve3(mouthPts),\r\n        10,\r\n        0.005,\r\n        8,\r\n        false\r\n      );\r\n      const mouth = new THREE.Mesh(mouthGeo, blackMat);\r\n      group.add(mouth);\r\n\r\n      // arms, legs, boots similar to runtime\r\n      const armGeo = new THREE.CapsuleGeometry(0.08, 0.46, 6, 12);\r\n      const leftArm = new THREE.Mesh(armGeo, bodyMat); leftArm.position.set(-0.5, 0.95, 0); leftArm.rotation.z = 0.25;\r\n      const rightArm = leftArm.clone(); rightArm.position.x = 0.5; rightArm.rotation.z = -0.25;\r\n      group.add(leftArm, rightArm);\r\n\r\n      const pants = new THREE.Mesh(new THREE.CylinderGeometry(0.22, 0.22, 0.34, 24), pantMat); pants.position.y = 0.0; group.add(pants);\r\n\r\n      const makeLeg = (x) => {\r\n        const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.10, 0.10, 0.36, 12), pantMat);\r\n        leg.position.set(x, -0.18, 0);\r\n        const boot = new THREE.Mesh(new THREE.CapsuleGeometry(0.13, 0.06, 6, 12), bootMat);\r\n        boot.position.set(x, -0.46, 0.06);\r\n        const trim = new THREE.Mesh(new THREE.TorusGeometry(0.14, 0.02, 8, 32), hatMat);\r\n        trim.position.set(x, -0.30, 0.06); trim.rotation.x = Math.PI / 2;\r\n        return [leg, boot, trim];\r\n      };\r\n      const [l1,l2,l3] = makeLeg(-0.13); const [r1,r2,r3] = makeLeg(0.13);\r\n      group.add(l1,l2,l3,r1,r2,r3);\r\n\r\n      const belt = new THREE.Mesh(new THREE.TorusGeometry(0.28, 0.03, 12, 32), bodyMat); belt.rotation.x = Math.PI/2; belt.position.y = 0.32;\r\n      group.add(belt);\r\n      const pouch = new THREE.Mesh(new THREE.SphereGeometry(0.06, 12, 12), hatMat); pouch.position.set(0.18, 0.32, 0.08);\r\n      group.add(pouch);\r\n\r\n      return group;\r\n    };\r\n\r\n    const charObj = buildExportChar();\r\n\r\n    // Export to glb\r\n    exporter.parse(\r\n      charObj,\r\n      (glb) => {\r\n        // glb is ArrayBuffer when options.binary = true\r\n        const blob = new Blob([glb], { type: \"model/gltf-binary\" });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement(\"a\");\r\n        a.href = url;\r\n        a.download = \"character.glb\";\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        setExporting(false);\r\n      },\r\n      (error) => {\r\n        console.error(\"GLTF export error:\", error);\r\n        setExporting(false);\r\n      },\r\n      { binary: true }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", gap: 12, alignItems: \"flex-start\" }}>\r\n      <div\r\n        ref={mountRef}\r\n        style={{\r\n          width: 360,\r\n          height: 480,\r\n          borderRadius: 16,\r\n          boxShadow: \"0 8px 30px rgba(0,0,0,0.12)\",\r\n          overflow: \"hidden\",\r\n          background: \"#eaf7ff\"\r\n        }}\r\n      />\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: 8 }}>\r\n        <button onClick={handleExport} disabled={exporting} style={{ padding: \"8px 12px\", borderRadius: 8 }}>\r\n          {exporting ? \"Exporting...\" : \"Export GLB\"}\r\n        </button>\r\n        <div style={{ maxWidth: 220, fontSize: 13, color: \"#333\" }}>\r\n          <b>Tips:</b>\r\n          <ul style={{ marginTop: 6 }}>\r\n            <li>Click \"Export GLB\" to download the model file <code>character.glb</code>.</li>\r\n            <li>Drop <code>character.glb</code> into <code>public/models/</code> and load with useGLTF in React Three Fiber.</li>\r\n            <li>If you want rigged skeleton for animations, tell me â€” I can produce a skinned export next.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}