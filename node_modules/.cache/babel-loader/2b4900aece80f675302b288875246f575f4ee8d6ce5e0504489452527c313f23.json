{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\my-portfolio-main\\\\src\\\\components\\\\ThreePerson.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreePerson() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const mount = mountRef.current;\n    const width = mount.clientWidth || 320;\n    const height = mount.clientHeight || 320;\n\n    // Scene & Camera\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf7f7fa);\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n    camera.position.set(0, 1.2, 3.2);\n    camera.lookAt(0, 1.0, 0);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: false\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    mount.appendChild(renderer.domElement);\n\n    // Character group\n    const character = new THREE.Group();\n    scene.add(character);\n\n    // Colors\n    const bodyColor = 0x1de9b6; // turquoise\n    const capColor = 0x8e24aa; // purple\n    const eyeColor = 0x222222;\n\n    // Torso (rounded cylinder)\n    const torsoMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      flatShading: true\n    });\n    const torso = new THREE.Mesh(new THREE.CylinderGeometry(0.32, 0.32, 1.05, 16), torsoMat);\n    torso.position.y = 0.7;\n    character.add(torso);\n\n    // Torso top (rounded)\n    const torsoTop = new THREE.Mesh(new THREE.SphereGeometry(0.32, 16, 12, 0, Math.PI * 2, 0, Math.PI / 2), torsoMat);\n    torsoTop.position.y = 1.225;\n    character.add(torsoTop);\n\n    // Torso bottom (rounded)\n    const torsoBottom = new THREE.Mesh(new THREE.SphereGeometry(0.32, 16, 12, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2), torsoMat);\n    torsoBottom.position.y = 0.175;\n    character.add(torsoBottom);\n\n    // Head (sphere, cap on top)\n    const headMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      flatShading: true\n    });\n    const head = new THREE.Mesh(new THREE.SphereGeometry(0.28, 16, 16), headMat);\n    head.position.y = 1.55;\n    character.add(head);\n\n    // Cap (purple hemisphere)\n    const capMat = new THREE.MeshStandardMaterial({\n      color: capColor,\n      flatShading: true\n    });\n    const cap = new THREE.Mesh(new THREE.SphereGeometry(0.29, 16, 12, 0, Math.PI * 2, 0, Math.PI / 2), capMat);\n    cap.position.y = 1.67;\n    character.add(cap);\n\n    // Arms (short, apart from body, A-pose)\n    const armMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      flatShading: true\n    });\n    function addArm(side = 1) {\n      const arm = new THREE.Mesh(new THREE.CylinderGeometry(0.09, 0.09, 0.38, 12), armMat);\n      arm.position.set(side * 0.38, 1.0, 0);\n      arm.rotation.z = side * Math.PI / 7;\n      character.add(arm);\n\n      // Hand (rounded)\n      const hand = new THREE.Mesh(new THREE.SphereGeometry(0.11, 12, 12), armMat);\n      hand.position.set(side * 0.38, 0.81, 0);\n      character.add(hand);\n    }\n    addArm(1);\n    addArm(-1);\n\n    // Legs (short, slightly apart)\n    const legMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      flatShading: true\n    });\n    function addLeg(side = 1) {\n      const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.10, 0.10, 0.32, 12), legMat);\n      leg.position.set(side * 0.15, 0.02, 0);\n      character.add(leg);\n\n      // Foot (rounded)\n      const foot = new THREE.Mesh(new THREE.SphereGeometry(0.12, 12, 12), legMat);\n      foot.position.set(side * 0.15, -0.13, 0.06);\n      character.add(foot);\n    }\n    addLeg(1);\n    addLeg(-1);\n\n    // Eyes (cartoon)\n    const eyeMat = new THREE.MeshStandardMaterial({\n      color: eyeColor,\n      flatShading: true\n    });\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.045, 8, 8), eyeMat);\n    leftEye.position.set(-0.07, 1.60, 0.25);\n    character.add(leftEye);\n    const rightEye = leftEye.clone();\n    rightEye.position.x = 0.07;\n    character.add(rightEye);\n\n    // Smiling mouth (arc)\n    const mouthShape = new THREE.BufferGeometry();\n    const mouthRadius = 0.07;\n    const mouthCurve = [];\n    for (let i = 0; i <= 16; i++) {\n      const a = Math.PI * (0.25 + i / 32);\n      mouthCurve.push(new THREE.Vector3(Math.cos(a) * mouthRadius, 1.54 - Math.sin(a) * 0.03, 0.255));\n    }\n    mouthShape.setFromPoints(mouthCurve);\n    const mouthMat = new THREE.LineBasicMaterial({\n      color: eyeColor,\n      linewidth: 2\n    });\n    const mouth = new THREE.Line(mouthShape, mouthMat);\n    character.add(mouth);\n\n    // Lighting\n    const ambient = new THREE.AmbientLight(0xffffff, 0.85);\n    scene.add(ambient);\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\n    dir.position.set(2, 4, 2);\n    scene.add(dir);\n\n    // Animation: subtle bounce\n    const clock = new THREE.Clock();\n    let reqId;\n    function animate() {\n      const t = clock.getElapsedTime();\n      character.position.y = Math.sin(t * 2.2) * 0.06;\n      character.rotation.y = Math.sin(t * 0.7) * 0.10;\n      renderer.render(scene, camera);\n      reqId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Responsive resize\n    function handleResize() {\n      const w = mount.clientWidth || 320;\n      const h = mount.clientHeight || 320;\n      camera.aspect = w / h;\n      camera.updateProjectionMatrix();\n      renderer.setSize(w, h);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup\n    return () => {\n      cancelAnimationFrame(reqId);\n      window.removeEventListener(\"resize\", handleResize);\n      renderer.dispose();\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\n      scene.traverse(obj => {\n        if (obj.isMesh) {\n          if (obj.geometry) obj.geometry.dispose();\n          if (obj.material) {\n            if (Array.isArray(obj.material)) obj.material.forEach(mat => mat.dispose());else obj.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"320px\",\n      height: \"320px\",\n      borderRadius: \"24px\",\n      boxShadow: \"0 8px 32px #90caf933\",\n      background: \"#f7f7fa\",\n      transition: \"box-shadow 0.3s\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreePerson, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreePerson;\nvar _c;\n$RefreshReg$(_c, \"ThreePerson\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","ThreePerson","_s","mountRef","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","Math","min","window","devicePixelRatio","outputColorSpace","SRGBColorSpace","appendChild","domElement","character","Group","add","bodyColor","capColor","eyeColor","torsoMat","MeshStandardMaterial","color","flatShading","torso","Mesh","CylinderGeometry","y","torsoTop","SphereGeometry","PI","torsoBottom","headMat","head","capMat","cap","armMat","addArm","side","arm","rotation","z","hand","legMat","addLeg","leg","foot","eyeMat","leftEye","rightEye","clone","x","mouthShape","BufferGeometry","mouthRadius","mouthCurve","i","a","push","Vector3","cos","sin","setFromPoints","mouthMat","LineBasicMaterial","linewidth","mouth","Line","ambient","AmbientLight","dir","DirectionalLight","clock","Clock","reqId","animate","t","getElapsedTime","render","requestAnimationFrame","handleResize","w","h","aspect","updateProjectionMatrix","addEventListener","cancelAnimationFrame","removeEventListener","dispose","removeChild","traverse","obj","isMesh","geometry","material","Array","isArray","forEach","mat","ref","style","borderRadius","boxShadow","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/my-portfolio-main/src/components/ThreePerson.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport default function ThreePerson() {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const mount = mountRef.current;\r\n    const width = mount.clientWidth || 320;\r\n    const height = mount.clientHeight || 320;\r\n\r\n    // Scene & Camera\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf7f7fa);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\r\n    camera.position.set(0, 1.2, 3.2);\r\n    camera.lookAt(0, 1.0, 0);\r\n\r\n    // Renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    mount.appendChild(renderer.domElement);\r\n\r\n    // Character group\r\n    const character = new THREE.Group();\r\n    scene.add(character);\r\n\r\n    // Colors\r\n    const bodyColor = 0x1de9b6; // turquoise\r\n    const capColor = 0x8e24aa;  // purple\r\n    const eyeColor = 0x222222;\r\n\r\n    // Torso (rounded cylinder)\r\n    const torsoMat = new THREE.MeshStandardMaterial({ color: bodyColor, flatShading: true });\r\n    const torso = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.32, 0.32, 1.05, 16),\r\n      torsoMat\r\n    );\r\n    torso.position.y = 0.7;\r\n    character.add(torso);\r\n\r\n    // Torso top (rounded)\r\n    const torsoTop = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.32, 16, 12, 0, Math.PI * 2, 0, Math.PI / 2),\r\n      torsoMat\r\n    );\r\n    torsoTop.position.y = 1.225;\r\n    character.add(torsoTop);\r\n\r\n    // Torso bottom (rounded)\r\n    const torsoBottom = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.32, 16, 12, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2),\r\n      torsoMat\r\n    );\r\n    torsoBottom.position.y = 0.175;\r\n    character.add(torsoBottom);\r\n\r\n    // Head (sphere, cap on top)\r\n    const headMat = new THREE.MeshStandardMaterial({ color: bodyColor, flatShading: true });\r\n    const head = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.28, 16, 16),\r\n      headMat\r\n    );\r\n    head.position.y = 1.55;\r\n    character.add(head);\r\n\r\n    // Cap (purple hemisphere)\r\n    const capMat = new THREE.MeshStandardMaterial({ color: capColor, flatShading: true });\r\n    const cap = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.29, 16, 12, 0, Math.PI * 2, 0, Math.PI / 2),\r\n      capMat\r\n    );\r\n    cap.position.y = 1.67;\r\n    character.add(cap);\r\n\r\n    // Arms (short, apart from body, A-pose)\r\n    const armMat = new THREE.MeshStandardMaterial({ color: bodyColor, flatShading: true });\r\n    function addArm(side = 1) {\r\n      const arm = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.09, 0.09, 0.38, 12),\r\n        armMat\r\n      );\r\n      arm.position.set(side * 0.38, 1.0, 0);\r\n      arm.rotation.z = side * Math.PI / 7;\r\n      character.add(arm);\r\n\r\n      // Hand (rounded)\r\n      const hand = new THREE.Mesh(\r\n        new THREE.SphereGeometry(0.11, 12, 12),\r\n        armMat\r\n      );\r\n      hand.position.set(side * 0.38, 0.81, 0);\r\n      character.add(hand);\r\n    }\r\n    addArm(1);\r\n    addArm(-1);\r\n\r\n    // Legs (short, slightly apart)\r\n    const legMat = new THREE.MeshStandardMaterial({ color: bodyColor, flatShading: true });\r\n    function addLeg(side = 1) {\r\n      const leg = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.10, 0.10, 0.32, 12),\r\n        legMat\r\n      );\r\n      leg.position.set(side * 0.15, 0.02, 0);\r\n      character.add(leg);\r\n\r\n      // Foot (rounded)\r\n      const foot = new THREE.Mesh(\r\n        new THREE.SphereGeometry(0.12, 12, 12),\r\n        legMat\r\n      );\r\n      foot.position.set(side * 0.15, -0.13, 0.06);\r\n      character.add(foot);\r\n    }\r\n    addLeg(1);\r\n    addLeg(-1);\r\n\r\n    // Eyes (cartoon)\r\n    const eyeMat = new THREE.MeshStandardMaterial({ color: eyeColor, flatShading: true });\r\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.045, 8, 8), eyeMat);\r\n    leftEye.position.set(-0.07, 1.60, 0.25);\r\n    character.add(leftEye);\r\n    const rightEye = leftEye.clone();\r\n    rightEye.position.x = 0.07;\r\n    character.add(rightEye);\r\n\r\n    // Smiling mouth (arc)\r\n    const mouthShape = new THREE.BufferGeometry();\r\n    const mouthRadius = 0.07;\r\n    const mouthCurve = [];\r\n    for (let i = 0; i <= 16; i++) {\r\n      const a = Math.PI * (0.25 + i / 32);\r\n      mouthCurve.push(\r\n        new THREE.Vector3(\r\n          Math.cos(a) * mouthRadius,\r\n          1.54 - Math.sin(a) * 0.03,\r\n          0.255\r\n        )\r\n      );\r\n    }\r\n    mouthShape.setFromPoints(mouthCurve);\r\n    const mouthMat = new THREE.LineBasicMaterial({ color: eyeColor, linewidth: 2 });\r\n    const mouth = new THREE.Line(mouthShape, mouthMat);\r\n    character.add(mouth);\r\n\r\n    // Lighting\r\n    const ambient = new THREE.AmbientLight(0xffffff, 0.85);\r\n    scene.add(ambient);\r\n\r\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\r\n    dir.position.set(2, 4, 2);\r\n    scene.add(dir);\r\n\r\n    // Animation: subtle bounce\r\n    const clock = new THREE.Clock();\r\n    let reqId;\r\n    function animate() {\r\n      const t = clock.getElapsedTime();\r\n      character.position.y = Math.sin(t * 2.2) * 0.06;\r\n      character.rotation.y = Math.sin(t * 0.7) * 0.10;\r\n      renderer.render(scene, camera);\r\n      reqId = requestAnimationFrame(animate);\r\n    }\r\n    animate();\r\n\r\n    // Responsive resize\r\n    function handleResize() {\r\n      const w = mount.clientWidth || 320;\r\n      const h = mount.clientHeight || 320;\r\n      camera.aspect = w / h;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(w, h);\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      cancelAnimationFrame(reqId);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      renderer.dispose();\r\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\r\n      scene.traverse((obj) => {\r\n        if (obj.isMesh) {\r\n          if (obj.geometry) obj.geometry.dispose();\r\n          if (obj.material) {\r\n            if (Array.isArray(obj.material)) obj.material.forEach((mat) => mat.dispose());\r\n            else obj.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      style={{\r\n        width: \"320px\",\r\n        height: \"320px\",\r\n        borderRadius: \"24px\",\r\n        boxShadow: \"0 8px 32px #90caf933\",\r\n        background: \"#f7f7fa\",\r\n        transition: \"box-shadow 0.3s\",\r\n      }}\r\n    />\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}