{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\my-portfolio-main\\\\src\\\\components\\\\ThreePerson.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreePerson() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const mount = mountRef.current;\n    const width = mount.clientWidth || 320;\n    const height = mount.clientHeight || 320;\n\n    // Scene & Camera\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf7f7fa);\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n    camera.position.set(0, 1.2, 3.2);\n    camera.lookAt(0, 0.9, 0);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: false\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mount.appendChild(renderer.domElement);\n\n    // Lights\n    const ambient = new THREE.AmbientLight(0xffffff, 0.8);\n    scene.add(ambient);\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\n    dir.position.set(2, 4, 2);\n    dir.castShadow = true;\n    dir.shadow.radius = 8;\n    dir.shadow.mapSize.width = 1024;\n    dir.shadow.mapSize.height = 1024;\n    scene.add(dir);\n\n    // Soft ground\n    const groundMat = new THREE.MeshStandardMaterial({\n      color: 0xe3f0ff,\n      roughness: 0.7\n    });\n    const ground = new THREE.Mesh(new THREE.CircleGeometry(2.2, 40), groundMat);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Palm trees (stylized, softer color)\n    function addPalm(x, z, h = 1.2) {\n      const trunkMat = new THREE.MeshStandardMaterial({\n        color: 0xffe066,\n        roughness: 0.6\n      });\n      const trunk = new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.08, h, 12), trunkMat);\n      trunk.position.set(x, h / 2 + 0.01, z);\n      trunk.castShadow = true;\n      scene.add(trunk);\n      const leafMat = new THREE.MeshStandardMaterial({\n        color: 0x90caf9,\n        roughness: 0.4\n      });\n      for (let i = 0; i < 5; i++) {\n        const leaf = new THREE.Mesh(new THREE.SphereGeometry(0.13, 12, 12), leafMat);\n        leaf.position.set(x + Math.cos(i / 5 * Math.PI * 2) * 0.18, h + 0.08, z + Math.sin(i / 5 * Math.PI * 2) * 0.18);\n        leaf.castShadow = true;\n        scene.add(leaf);\n      }\n    }\n    addPalm(-1.1, 0.8, 1.1);\n    addPalm(1.2, -0.7, 1.3);\n\n    // Character group\n    const character = new THREE.Group();\n    scene.add(character);\n\n    // Capsule body (soft blue)\n    const bodyColor = 0x90caf9;\n    const bodyMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      roughness: 0.45,\n      metalness: 0.1\n    });\n    const capsuleHeight = 1.1;\n    const capsuleRadius = 0.32;\n    const bodyCylinder = new THREE.Mesh(new THREE.CylinderGeometry(capsuleRadius, capsuleRadius, capsuleHeight, 32), bodyMat);\n    bodyCylinder.position.y = capsuleHeight / 2 + 0.18;\n    bodyCylinder.castShadow = true;\n    character.add(bodyCylinder);\n\n    // Top hemisphere (head)\n    const headSphere = new THREE.Mesh(new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2), bodyMat);\n    headSphere.position.y = capsuleHeight + 0.18;\n    headSphere.castShadow = true;\n    character.add(headSphere);\n\n    // Bottom hemisphere\n    const bottomSphere = new THREE.Mesh(new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2), bodyMat);\n    bottomSphere.position.y = 0.18;\n    bottomSphere.castShadow = true;\n    character.add(bottomSphere);\n\n    // Belt (soft purple)\n    const beltMat = new THREE.MeshStandardMaterial({\n      color: 0xb39ddb,\n      roughness: 0.3\n    });\n    const belt = new THREE.Mesh(new THREE.TorusGeometry(capsuleRadius + 0.03, 0.045, 16, 32), beltMat);\n    belt.position.y = capsuleHeight * 0.45 + 0.18;\n    belt.rotation.x = Math.PI / 2;\n    belt.castShadow = true;\n    character.add(belt);\n\n    // Hat (soft purple)\n    const hatMat = new THREE.MeshStandardMaterial({\n      color: 0xb39ddb,\n      roughness: 0.3\n    });\n    const hatBrim = new THREE.Mesh(new THREE.CylinderGeometry(capsuleRadius * 1.05, capsuleRadius * 1.05, 0.07, 24), hatMat);\n    hatBrim.position.y = capsuleHeight + 0.18 + capsuleRadius - 0.03;\n    hatBrim.castShadow = true;\n    character.add(hatBrim);\n    const hatTop = new THREE.Mesh(new THREE.CylinderGeometry(capsuleRadius * 0.7, capsuleRadius * 0.7, 0.18, 24), hatMat);\n    hatTop.position.y = capsuleHeight + 0.18 + capsuleRadius + 0.07;\n    hatTop.castShadow = true;\n    character.add(hatTop);\n\n    // Eyes (black)\n    const eyeMat = new THREE.MeshStandardMaterial({\n      color: 0x222222,\n      roughness: 0.7\n    });\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.045, 12, 12), eyeMat);\n    leftEye.position.set(-0.09, capsuleHeight + 0.32, capsuleRadius * 0.92);\n    leftEye.castShadow = true;\n    character.add(leftEye);\n    const rightEye = leftEye.clone();\n    rightEye.position.x = 0.09;\n    character.add(rightEye);\n\n    // Mouth (smile, arc)\n    const mouthShape = new THREE.BufferGeometry();\n    const mouthRadius = 0.09;\n    const mouthCurve = [];\n    for (let i = 0; i <= 16; i++) {\n      const a = Math.PI * (0.25 + i / 32);\n      mouthCurve.push(new THREE.Vector3(Math.cos(a) * mouthRadius, capsuleHeight + 0.23 - Math.sin(a) * 0.04, capsuleRadius * 0.98 + 0.001));\n    }\n    mouthShape.setFromPoints(mouthCurve);\n    const mouthMat = new THREE.LineBasicMaterial({\n      color: 0x222222,\n      linewidth: 3\n    });\n    const mouth = new THREE.Line(mouthShape, mouthMat);\n    character.add(mouth);\n\n    // Arms (thin, round)\n    const arms = [];\n    function addArm(side = 1) {\n      const armMat = new THREE.MeshStandardMaterial({\n        color: bodyColor,\n        roughness: 0.45\n      });\n      const arm = new THREE.Mesh(new THREE.CylinderGeometry(0.045, 0.045, 0.55, 16), armMat);\n      arm.position.set(side * (capsuleRadius + 0.07), capsuleHeight * 0.7, 0);\n      arm.rotation.z = side * Math.PI / 6;\n      arm.castShadow = true;\n      character.add(arm);\n      arms.push(arm);\n\n      // Hand\n      const hand = new THREE.Mesh(new THREE.SphereGeometry(0.06, 16, 16), armMat);\n      hand.position.set(side * (capsuleRadius + 0.07 + 0.28), capsuleHeight * 0.7 - 0.22, 0);\n      hand.castShadow = true;\n      character.add(hand);\n    }\n    addArm(1); // phải\n    addArm(-1); // trái\n\n    // Legs (thin, round)\n    function addLeg(side = 1) {\n      const legMat = new THREE.MeshStandardMaterial({\n        color: bodyColor,\n        roughness: 0.45\n      });\n      const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.055, 0.055, 0.48, 16), legMat);\n      leg.position.set(side * 0.13, 0.18 + 0.24, 0);\n      leg.rotation.x = Math.PI / 32;\n      leg.castShadow = true;\n      character.add(leg);\n\n      // Foot\n      const foot = new THREE.Mesh(new THREE.SphereGeometry(0.07, 16, 16), legMat);\n      foot.position.set(side * 0.13, 0.18, 0.09);\n      foot.castShadow = true;\n      character.add(foot);\n    }\n    addLeg(1);\n    addLeg(-1);\n\n    // Animation: bounce & rotate\n    const clock = new THREE.Clock();\n    let reqId;\n    function animate() {\n      const t = clock.getElapsedTime();\n      character.position.y = Math.sin(t * 2.2) * 0.08;\n      character.rotation.y = Math.sin(t * 0.7) * 0.12 + Math.sin(t * 0.2) * 0.08;\n      character.rotation.x = Math.sin(t * 0.5) * 0.04;\n\n      // Vẫy tay phải (arms[0])\n      if (arms[0]) {\n        arms[0].rotation.z = Math.PI / 6 + Math.sin(t * 2.5) * 0.7;\n      }\n      // Tay trái giữ nguyên\n      if (arms[1]) {\n        arms[1].rotation.z = -Math.PI / 6;\n      }\n      renderer.render(scene, camera);\n      reqId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Responsive resize\n    function handleResize() {\n      const w = mount.clientWidth || 320;\n      const h = mount.clientHeight || 320;\n      camera.aspect = w / h;\n      camera.updateProjectionMatrix();\n      renderer.setSize(w, h);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup\n    return () => {\n      cancelAnimationFrame(reqId);\n      window.removeEventListener(\"resize\", handleResize);\n      renderer.dispose();\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\n      scene.traverse(obj => {\n        if (obj.isMesh) {\n          if (obj.geometry) obj.geometry.dispose();\n          if (obj.material) {\n            if (Array.isArray(obj.material)) obj.material.forEach(mat => mat.dispose());else obj.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"320px\",\n      height: \"320px\",\n      borderRadius: \"24px\",\n      boxShadow: \"0 8px 32px #90caf933\",\n      background: \"#f7f7fa\",\n      transition: \"box-shadow 0.3s\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreePerson, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreePerson;\nvar _c;\n$RefreshReg$(_c, \"ThreePerson\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","ThreePerson","_s","mountRef","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","Math","min","window","devicePixelRatio","outputColorSpace","SRGBColorSpace","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","ambient","AmbientLight","add","dir","DirectionalLight","castShadow","shadow","radius","mapSize","groundMat","MeshStandardMaterial","color","roughness","ground","Mesh","CircleGeometry","rotation","x","PI","y","receiveShadow","addPalm","z","h","trunkMat","trunk","CylinderGeometry","leafMat","i","leaf","SphereGeometry","cos","sin","character","Group","bodyColor","bodyMat","metalness","capsuleHeight","capsuleRadius","bodyCylinder","headSphere","bottomSphere","beltMat","belt","TorusGeometry","hatMat","hatBrim","hatTop","eyeMat","leftEye","rightEye","clone","mouthShape","BufferGeometry","mouthRadius","mouthCurve","a","push","Vector3","setFromPoints","mouthMat","LineBasicMaterial","linewidth","mouth","Line","arms","addArm","side","armMat","arm","hand","addLeg","legMat","leg","foot","clock","Clock","reqId","animate","t","getElapsedTime","render","requestAnimationFrame","handleResize","w","aspect","updateProjectionMatrix","addEventListener","cancelAnimationFrame","removeEventListener","dispose","removeChild","traverse","obj","isMesh","geometry","material","Array","isArray","forEach","mat","ref","style","borderRadius","boxShadow","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/my-portfolio-main/src/components/ThreePerson.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport default function ThreePerson() {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const mount = mountRef.current;\r\n    const width = mount.clientWidth || 320;\r\n    const height = mount.clientHeight || 320;\r\n\r\n    // Scene & Camera\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf7f7fa);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\r\n    camera.position.set(0, 1.2, 3.2);\r\n    camera.lookAt(0, 0.9, 0);\r\n\r\n    // Renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    mount.appendChild(renderer.domElement);\r\n\r\n    // Lights\r\n    const ambient = new THREE.AmbientLight(0xffffff, 0.8);\r\n    scene.add(ambient);\r\n\r\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\r\n    dir.position.set(2, 4, 2);\r\n    dir.castShadow = true;\r\n    dir.shadow.radius = 8;\r\n    dir.shadow.mapSize.width = 1024;\r\n    dir.shadow.mapSize.height = 1024;\r\n    scene.add(dir);\r\n\r\n    // Soft ground\r\n    const groundMat = new THREE.MeshStandardMaterial({ color: 0xe3f0ff, roughness: 0.7 });\r\n    const ground = new THREE.Mesh(new THREE.CircleGeometry(2.2, 40), groundMat);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = 0;\r\n    ground.receiveShadow = true;\r\n    scene.add(ground);\r\n\r\n    // Palm trees (stylized, softer color)\r\n    function addPalm(x, z, h = 1.2) {\r\n      const trunkMat = new THREE.MeshStandardMaterial({ color: 0xffe066, roughness: 0.6 });\r\n      const trunk = new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.08, h, 12), trunkMat);\r\n      trunk.position.set(x, h / 2 + 0.01, z);\r\n      trunk.castShadow = true;\r\n      scene.add(trunk);\r\n\r\n      const leafMat = new THREE.MeshStandardMaterial({ color: 0x90caf9, roughness: 0.4 });\r\n      for (let i = 0; i < 5; i++) {\r\n        const leaf = new THREE.Mesh(new THREE.SphereGeometry(0.13, 12, 12), leafMat);\r\n        leaf.position.set(\r\n          x + Math.cos((i / 5) * Math.PI * 2) * 0.18,\r\n          h + 0.08,\r\n          z + Math.sin((i / 5) * Math.PI * 2) * 0.18\r\n        );\r\n        leaf.castShadow = true;\r\n        scene.add(leaf);\r\n      }\r\n    }\r\n    addPalm(-1.1, 0.8, 1.1);\r\n    addPalm(1.2, -0.7, 1.3);\r\n\r\n    // Character group\r\n    const character = new THREE.Group();\r\n    scene.add(character);\r\n\r\n    // Capsule body (soft blue)\r\n    const bodyColor = 0x90caf9;\r\n    const bodyMat = new THREE.MeshStandardMaterial({ color: bodyColor, roughness: 0.45, metalness: 0.1 });\r\n    const capsuleHeight = 1.1;\r\n    const capsuleRadius = 0.32;\r\n    const bodyCylinder = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(capsuleRadius, capsuleRadius, capsuleHeight, 32),\r\n      bodyMat\r\n    );\r\n    bodyCylinder.position.y = capsuleHeight / 2 + 0.18;\r\n    bodyCylinder.castShadow = true;\r\n    character.add(bodyCylinder);\r\n\r\n    // Top hemisphere (head)\r\n    const headSphere = new THREE.Mesh(\r\n      new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2),\r\n      bodyMat\r\n    );\r\n    headSphere.position.y = capsuleHeight + 0.18;\r\n    headSphere.castShadow = true;\r\n    character.add(headSphere);\r\n\r\n    // Bottom hemisphere\r\n    const bottomSphere = new THREE.Mesh(\r\n      new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2),\r\n      bodyMat\r\n    );\r\n    bottomSphere.position.y = 0.18;\r\n    bottomSphere.castShadow = true;\r\n    character.add(bottomSphere);\r\n\r\n    // Belt (soft purple)\r\n    const beltMat = new THREE.MeshStandardMaterial({ color: 0xb39ddb, roughness: 0.3 });\r\n    const belt = new THREE.Mesh(\r\n      new THREE.TorusGeometry(capsuleRadius + 0.03, 0.045, 16, 32),\r\n      beltMat\r\n    );\r\n    belt.position.y = capsuleHeight * 0.45 + 0.18;\r\n    belt.rotation.x = Math.PI / 2;\r\n    belt.castShadow = true;\r\n    character.add(belt);\r\n\r\n    // Hat (soft purple)\r\n    const hatMat = new THREE.MeshStandardMaterial({ color: 0xb39ddb, roughness: 0.3 });\r\n    const hatBrim = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(capsuleRadius * 1.05, capsuleRadius * 1.05, 0.07, 24),\r\n      hatMat\r\n    );\r\n    hatBrim.position.y = capsuleHeight + 0.18 + capsuleRadius - 0.03;\r\n    hatBrim.castShadow = true;\r\n    character.add(hatBrim);\r\n\r\n    const hatTop = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(capsuleRadius * 0.7, capsuleRadius * 0.7, 0.18, 24),\r\n      hatMat\r\n    );\r\n    hatTop.position.y = capsuleHeight + 0.18 + capsuleRadius + 0.07;\r\n    hatTop.castShadow = true;\r\n    character.add(hatTop);\r\n\r\n    // Eyes (black)\r\n    const eyeMat = new THREE.MeshStandardMaterial({ color: 0x222222, roughness: 0.7 });\r\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.045, 12, 12), eyeMat);\r\n    leftEye.position.set(-0.09, capsuleHeight + 0.32, capsuleRadius * 0.92);\r\n    leftEye.castShadow = true;\r\n    character.add(leftEye);\r\n    const rightEye = leftEye.clone();\r\n    rightEye.position.x = 0.09;\r\n    character.add(rightEye);\r\n\r\n    // Mouth (smile, arc)\r\n    const mouthShape = new THREE.BufferGeometry();\r\n    const mouthRadius = 0.09;\r\n    const mouthCurve = [];\r\n    for (let i = 0; i <= 16; i++) {\r\n      const a = Math.PI * (0.25 + i / 32);\r\n      mouthCurve.push(\r\n        new THREE.Vector3(\r\n          Math.cos(a) * mouthRadius,\r\n          capsuleHeight + 0.23 - Math.sin(a) * 0.04,\r\n          capsuleRadius * 0.98 + 0.001\r\n        )\r\n      );\r\n    }\r\n    mouthShape.setFromPoints(mouthCurve);\r\n    const mouthMat = new THREE.LineBasicMaterial({ color: 0x222222, linewidth: 3 });\r\n    const mouth = new THREE.Line(mouthShape, mouthMat);\r\n    character.add(mouth);\r\n\r\n    // Arms (thin, round)\r\n    const arms = [];\r\n    function addArm(side = 1) {\r\n      const armMat = new THREE.MeshStandardMaterial({ color: bodyColor, roughness: 0.45 });\r\n      const arm = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.045, 0.045, 0.55, 16),\r\n        armMat\r\n      );\r\n      arm.position.set(side * (capsuleRadius + 0.07), capsuleHeight * 0.7, 0);\r\n      arm.rotation.z = side * Math.PI / 6;\r\n      arm.castShadow = true;\r\n      character.add(arm);\r\n      arms.push(arm);\r\n\r\n      // Hand\r\n      const hand = new THREE.Mesh(new THREE.SphereGeometry(0.06, 16, 16), armMat);\r\n      hand.position.set(side * (capsuleRadius + 0.07 + 0.28), capsuleHeight * 0.7 - 0.22, 0);\r\n      hand.castShadow = true;\r\n      character.add(hand);\r\n    }\r\n    addArm(1);  // phải\r\n    addArm(-1); // trái\r\n\r\n    // Legs (thin, round)\r\n    function addLeg(side = 1) {\r\n      const legMat = new THREE.MeshStandardMaterial({ color: bodyColor, roughness: 0.45 });\r\n      const leg = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.055, 0.055, 0.48, 16),\r\n        legMat\r\n      );\r\n      leg.position.set(side * 0.13, 0.18 + 0.24, 0);\r\n      leg.rotation.x = Math.PI / 32;\r\n      leg.castShadow = true;\r\n      character.add(leg);\r\n\r\n      // Foot\r\n      const foot = new THREE.Mesh(new THREE.SphereGeometry(0.07, 16, 16), legMat);\r\n      foot.position.set(side * 0.13, 0.18, 0.09);\r\n      foot.castShadow = true;\r\n      character.add(foot);\r\n    }\r\n    addLeg(1);\r\n    addLeg(-1);\r\n\r\n    // Animation: bounce & rotate\r\n    const clock = new THREE.Clock();\r\n    let reqId;\r\n    function animate() {\r\n      const t = clock.getElapsedTime();\r\n      character.position.y = Math.sin(t * 2.2) * 0.08;\r\n      character.rotation.y = Math.sin(t * 0.7) * 0.12 + Math.sin(t * 0.2) * 0.08;\r\n      character.rotation.x = Math.sin(t * 0.5) * 0.04;\r\n\r\n      // Vẫy tay phải (arms[0])\r\n      if (arms[0]) {\r\n        arms[0].rotation.z = Math.PI / 6 + Math.sin(t * 2.5) * 0.7;\r\n      }\r\n      // Tay trái giữ nguyên\r\n      if (arms[1]) {\r\n        arms[1].rotation.z = -Math.PI / 6;\r\n      }\r\n\r\n      renderer.render(scene, camera);\r\n      reqId = requestAnimationFrame(animate);\r\n    }\r\n    animate();\r\n\r\n    // Responsive resize\r\n    function handleResize() {\r\n      const w = mount.clientWidth || 320;\r\n      const h = mount.clientHeight || 320;\r\n      camera.aspect = w / h;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(w, h);\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      cancelAnimationFrame(reqId);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      renderer.dispose();\r\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\r\n      scene.traverse((obj) => {\r\n        if (obj.isMesh) {\r\n          if (obj.geometry) obj.geometry.dispose();\r\n          if (obj.material) {\r\n            if (Array.isArray(obj.material)) obj.material.forEach((mat) => mat.dispose());\r\n            else obj.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      style={{\r\n        width: \"320px\",\r\n        height: \"320px\",\r\n        borderRadius: \"24px\",\r\n        boxShadow: \"0 8px 32px #90caf933\",\r\n        background: \"#f7f7fa\",\r\n        transition: \"box-shadow 0.3s\",\r\n      }}\r\n    />\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}