{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\my-portfolio-main\\\\src\\\\components\\\\ThreePerson.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreePerson() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const mount = mountRef.current;\n    if (!mount) return;\n    const width = mount.clientWidth || 320;\n    const height = mount.clientHeight || 320;\n\n    // Scene & Camera\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xb3e5fc); // Sky blue\n\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n    camera.position.set(0, 1.2, 3.2);\n    camera.lookAt(0, 0.9, 0);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: false\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    mount.appendChild(renderer.domElement);\n\n    // Lights\n    scene.add(new THREE.AmbientLight(0xffffff, 0.7));\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\n    dir.position.set(2, 4, 2);\n    scene.add(dir);\n\n    // Ground\n    const groundMat = new THREE.MeshLambertMaterial({\n      color: 0xfffde7\n    });\n    const ground = new THREE.Mesh(new THREE.CircleGeometry(2.2, 40), groundMat);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    scene.add(ground);\n\n    // Palm trees (simple stylized)\n    function addPalm(x, z, h = 1.2) {\n      // Trunk\n      const trunkMat = new THREE.MeshLambertMaterial({\n        color: 0xffcc80\n      });\n      const trunk = new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.08, h, 8), trunkMat);\n      trunk.position.set(x, h / 2 + 0.01, z);\n      scene.add(trunk);\n      // Leaves\n      const leafMat = new THREE.MeshLambertMaterial({\n        color: 0x388e3c\n      });\n      for (let i = 0; i < 5; i++) {\n        const leaf = new THREE.Mesh(new THREE.SphereGeometry(0.13, 8, 8), leafMat);\n        leaf.position.set(x + Math.cos(i / 5 * Math.PI * 2) * 0.18, h + 0.08, z + Math.sin(i / 5 * Math.PI * 2) * 0.18);\n        scene.add(leaf);\n      }\n    }\n    addPalm(-1.1, 0.8, 1.1);\n    addPalm(1.2, -0.7, 1.3);\n\n    // Character group\n    const character = new THREE.Group();\n    scene.add(character);\n\n    // Capsule body (cyan)\n    const bodyColor = 0x00bcd4;\n    const bodyMat = new THREE.MeshToonMaterial({\n      color: bodyColor\n    });\n    // Capsule: cylinder + two half-spheres\n    const capsuleHeight = 1.1;\n    const capsuleRadius = 0.32;\n    const bodyCylinder = new THREE.Mesh(new THREE.CylinderGeometry(capsuleRadius, capsuleRadius, capsuleHeight, 32), bodyMat);\n    bodyCylinder.position.y = capsuleHeight / 2 + 0.18;\n    character.add(bodyCylinder);\n\n    // Top hemisphere (head, not separated)\n    const headSphere = new THREE.Mesh(new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2), bodyMat);\n    headSphere.position.y = capsuleHeight + 0.18;\n    character.add(headSphere);\n\n    // Bottom hemisphere\n    const bottomSphere = new THREE.Mesh(new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2), bodyMat);\n    bottomSphere.position.y = 0.18;\n    character.add(bottomSphere);\n\n    // Belt (purple)\n    const beltMat = new THREE.MeshToonMaterial({\n      color: 0xb39ddb\n    });\n    const belt = new THREE.Mesh(new THREE.TorusGeometry(capsuleRadius + 0.03, 0.045, 16, 32), beltMat);\n    belt.position.y = capsuleHeight * 0.45 + 0.18;\n    belt.rotation.x = Math.PI / 2;\n    character.add(belt);\n\n    // Hat (purple)\n    const hatMat = new THREE.MeshToonMaterial({\n      color: 0xb39ddb\n    });\n    const hatBrim = new THREE.Mesh(new THREE.CylinderGeometry(capsuleRadius * 1.05, capsuleRadius * 1.05, 0.07, 24), hatMat);\n    hatBrim.position.y = capsuleHeight + 0.18 + capsuleRadius - 0.03;\n    character.add(hatBrim);\n    const hatTop = new THREE.Mesh(new THREE.CylinderGeometry(capsuleRadius * 0.7, capsuleRadius * 0.7, 0.18, 24), hatMat);\n    hatTop.position.y = capsuleHeight + 0.18 + capsuleRadius + 0.07;\n    character.add(hatTop);\n\n    // Eyes (black)\n    const eyeMat = new THREE.MeshToonMaterial({\n      color: 0x222222\n    });\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.045, 12, 12), eyeMat);\n    leftEye.position.set(-0.09, capsuleHeight + 0.32, capsuleRadius * 0.92);\n    character.add(leftEye);\n    const rightEye = leftEye.clone();\n    rightEye.position.x = 0.09;\n    character.add(rightEye);\n\n    // Mouth (smile, arc)\n    const mouthShape = new THREE.BufferGeometry();\n    const mouthRadius = 0.09;\n    const mouthCurve = [];\n    for (let i = 0; i <= 16; i++) {\n      const a = Math.PI * (0.25 + i / 32);\n      mouthCurve.push(new THREE.Vector3(Math.cos(a) * mouthRadius, capsuleHeight + 0.23 - Math.sin(a) * 0.04, capsuleRadius * 0.98 + 0.001));\n    }\n    mouthShape.setFromPoints(mouthCurve);\n    const mouthMat = new THREE.LineBasicMaterial({\n      color: 0x222222,\n      linewidth: 3\n    });\n    const mouth = new THREE.Line(mouthShape, mouthMat);\n    character.add(mouth);\n\n    // Arms (thin, round)\n    function addArm(side = 1) {\n      const armMat = new THREE.MeshToonMaterial({\n        color: bodyColor\n      });\n      const arm = new THREE.Mesh(new THREE.CylinderGeometry(0.045, 0.045, 0.55, 16), armMat);\n      arm.position.set(side * (capsuleRadius + 0.07), capsuleHeight * 0.7, 0);\n      arm.rotation.z = side * Math.PI / 6;\n      character.add(arm);\n\n      // Hand\n      const hand = new THREE.Mesh(new THREE.SphereGeometry(0.06, 16, 16), armMat);\n      hand.position.set(side * (capsuleRadius + 0.07 + 0.28), capsuleHeight * 0.7 - 0.22, 0);\n      character.add(hand);\n    }\n    addArm(1);\n    addArm(-1);\n\n    // Legs (thin, round)\n    function addLeg(side = 1) {\n      const legMat = new THREE.MeshToonMaterial({\n        color: bodyColor\n      });\n      const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.055, 0.055, 0.48, 16), legMat);\n      leg.position.set(side * 0.13, 0.18 + 0.24, 0);\n      leg.rotation.x = Math.PI / 32;\n      character.add(leg);\n\n      // Foot\n      const foot = new THREE.Mesh(new THREE.SphereGeometry(0.07, 16, 16), legMat);\n      foot.position.set(side * 0.13, 0.18, 0.09);\n      character.add(foot);\n    }\n    addLeg(1);\n    addLeg(-1);\n\n    // Toon shading: add light gradient (simulate)\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n    // Controls (optional, can disable rotate for cartoon)\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.enablePan = false;\n    controls.minDistance = 2;\n    controls.maxDistance = 6;\n    controls.target.set(0, capsuleHeight * 0.7, 0);\n\n    // Animation: bounce\n    let reqId;\n    const clock = new THREE.Clock();\n    function animate() {\n      const t = clock.getElapsedTime();\n      character.position.y = Math.sin(t * 2.2) * 0.08;\n      character.rotation.y = Math.sin(t * 0.7) * 0.08;\n      controls.update();\n      renderer.render(scene, camera);\n      reqId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Resize\n    function handleResize() {\n      const w = mount.clientWidth;\n      const h = mount.clientHeight;\n      camera.aspect = w / h;\n      camera.updateProjectionMatrix();\n      renderer.setSize(w, h);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup\n    return () => {\n      cancelAnimationFrame(reqId);\n      window.removeEventListener(\"resize\", handleResize);\n      controls.dispose();\n      renderer.dispose();\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\n      scene.traverse(obj => {\n        if (obj.isMesh) {\n          if (obj.geometry) obj.geometry.dispose();\n          if (obj.material) {\n            if (Array.isArray(obj.material)) obj.material.forEach(mat => mat.dispose());else obj.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"320px\",\n      height: \"320px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 10\n  }, this);\n}\n_s(ThreePerson, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreePerson;\nvar _c;\n$RefreshReg$(_c, \"ThreePerson\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreePerson","_s","mountRef","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","Math","min","window","devicePixelRatio","appendChild","domElement","add","AmbientLight","dir","DirectionalLight","groundMat","MeshLambertMaterial","color","ground","Mesh","CircleGeometry","rotation","x","PI","y","addPalm","z","h","trunkMat","trunk","CylinderGeometry","leafMat","i","leaf","SphereGeometry","cos","sin","character","Group","bodyColor","bodyMat","MeshToonMaterial","capsuleHeight","capsuleRadius","bodyCylinder","headSphere","bottomSphere","beltMat","belt","TorusGeometry","hatMat","hatBrim","hatTop","eyeMat","leftEye","rightEye","clone","mouthShape","BufferGeometry","mouthRadius","mouthCurve","a","push","Vector3","setFromPoints","mouthMat","LineBasicMaterial","linewidth","mouth","Line","addArm","side","armMat","arm","hand","addLeg","legMat","leg","foot","outputColorSpace","SRGBColorSpace","controls","enableDamping","enablePan","minDistance","maxDistance","target","reqId","clock","Clock","animate","t","getElapsedTime","update","render","requestAnimationFrame","handleResize","w","aspect","updateProjectionMatrix","addEventListener","cancelAnimationFrame","removeEventListener","dispose","removeChild","traverse","obj","isMesh","geometry","material","Array","isArray","forEach","mat","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/my-portfolio-main/src/components/ThreePerson.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport default function ThreePerson() {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const mount = mountRef.current;\r\n    if (!mount) return;\r\n\r\n    const width = mount.clientWidth || 320;\r\n    const height = mount.clientHeight || 320;\r\n\r\n    // Scene & Camera\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xb3e5fc); // Sky blue\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\r\n    camera.position.set(0, 1.2, 3.2);\r\n    camera.lookAt(0, 0.9, 0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    mount.appendChild(renderer.domElement);\r\n\r\n    // Lights\r\n    scene.add(new THREE.AmbientLight(0xffffff, 0.7));\r\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\r\n    dir.position.set(2, 4, 2);\r\n    scene.add(dir);\r\n\r\n    // Ground\r\n    const groundMat = new THREE.MeshLambertMaterial({ color: 0xfffde7 });\r\n    const ground = new THREE.Mesh(new THREE.CircleGeometry(2.2, 40), groundMat);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = 0;\r\n    scene.add(ground);\r\n\r\n    // Palm trees (simple stylized)\r\n    function addPalm(x, z, h = 1.2) {\r\n      // Trunk\r\n      const trunkMat = new THREE.MeshLambertMaterial({ color: 0xffcc80 });\r\n      const trunk = new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.08, h, 8), trunkMat);\r\n      trunk.position.set(x, h / 2 + 0.01, z);\r\n      scene.add(trunk);\r\n      // Leaves\r\n      const leafMat = new THREE.MeshLambertMaterial({ color: 0x388e3c });\r\n      for (let i = 0; i < 5; i++) {\r\n        const leaf = new THREE.Mesh(new THREE.SphereGeometry(0.13, 8, 8), leafMat);\r\n        leaf.position.set(\r\n          x + Math.cos((i / 5) * Math.PI * 2) * 0.18,\r\n          h + 0.08,\r\n          z + Math.sin((i / 5) * Math.PI * 2) * 0.18\r\n        );\r\n        scene.add(leaf);\r\n      }\r\n    }\r\n    addPalm(-1.1, 0.8, 1.1);\r\n    addPalm(1.2, -0.7, 1.3);\r\n\r\n    // Character group\r\n    const character = new THREE.Group();\r\n    scene.add(character);\r\n\r\n    // Capsule body (cyan)\r\n    const bodyColor = 0x00bcd4;\r\n    const bodyMat = new THREE.MeshToonMaterial({ color: bodyColor });\r\n    // Capsule: cylinder + two half-spheres\r\n    const capsuleHeight = 1.1;\r\n    const capsuleRadius = 0.32;\r\n    const bodyCylinder = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(capsuleRadius, capsuleRadius, capsuleHeight, 32),\r\n      bodyMat\r\n    );\r\n    bodyCylinder.position.y = capsuleHeight / 2 + 0.18;\r\n    character.add(bodyCylinder);\r\n\r\n    // Top hemisphere (head, not separated)\r\n    const headSphere = new THREE.Mesh(\r\n      new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2),\r\n      bodyMat\r\n    );\r\n    headSphere.position.y = capsuleHeight + 0.18;\r\n    character.add(headSphere);\r\n\r\n    // Bottom hemisphere\r\n    const bottomSphere = new THREE.Mesh(\r\n      new THREE.SphereGeometry(capsuleRadius, 32, 16, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2),\r\n      bodyMat\r\n    );\r\n    bottomSphere.position.y = 0.18;\r\n    character.add(bottomSphere);\r\n\r\n    // Belt (purple)\r\n    const beltMat = new THREE.MeshToonMaterial({ color: 0xb39ddb });\r\n    const belt = new THREE.Mesh(\r\n      new THREE.TorusGeometry(capsuleRadius + 0.03, 0.045, 16, 32),\r\n      beltMat\r\n    );\r\n    belt.position.y = capsuleHeight * 0.45 + 0.18;\r\n    belt.rotation.x = Math.PI / 2;\r\n    character.add(belt);\r\n\r\n    // Hat (purple)\r\n    const hatMat = new THREE.MeshToonMaterial({ color: 0xb39ddb });\r\n    const hatBrim = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(capsuleRadius * 1.05, capsuleRadius * 1.05, 0.07, 24),\r\n      hatMat\r\n    );\r\n    hatBrim.position.y = capsuleHeight + 0.18 + capsuleRadius - 0.03;\r\n    character.add(hatBrim);\r\n\r\n    const hatTop = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(capsuleRadius * 0.7, capsuleRadius * 0.7, 0.18, 24),\r\n      hatMat\r\n    );\r\n    hatTop.position.y = capsuleHeight + 0.18 + capsuleRadius + 0.07;\r\n    character.add(hatTop);\r\n\r\n    // Eyes (black)\r\n    const eyeMat = new THREE.MeshToonMaterial({ color: 0x222222 });\r\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.045, 12, 12), eyeMat);\r\n    leftEye.position.set(-0.09, capsuleHeight + 0.32, capsuleRadius * 0.92);\r\n    character.add(leftEye);\r\n    const rightEye = leftEye.clone();\r\n    rightEye.position.x = 0.09;\r\n    character.add(rightEye);\r\n\r\n    // Mouth (smile, arc)\r\n    const mouthShape = new THREE.BufferGeometry();\r\n    const mouthRadius = 0.09;\r\n    const mouthCurve = [];\r\n    for (let i = 0; i <= 16; i++) {\r\n      const a = Math.PI * (0.25 + i / 32);\r\n      mouthCurve.push(\r\n        new THREE.Vector3(\r\n          Math.cos(a) * mouthRadius,\r\n          capsuleHeight + 0.23 - Math.sin(a) * 0.04,\r\n          capsuleRadius * 0.98 + 0.001\r\n        )\r\n      );\r\n    }\r\n    mouthShape.setFromPoints(mouthCurve);\r\n    const mouthMat = new THREE.LineBasicMaterial({ color: 0x222222, linewidth: 3 });\r\n    const mouth = new THREE.Line(mouthShape, mouthMat);\r\n    character.add(mouth);\r\n\r\n    // Arms (thin, round)\r\n    function addArm(side = 1) {\r\n      const armMat = new THREE.MeshToonMaterial({ color: bodyColor });\r\n      const arm = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.045, 0.045, 0.55, 16),\r\n        armMat\r\n      );\r\n      arm.position.set(side * (capsuleRadius + 0.07), capsuleHeight * 0.7, 0);\r\n      arm.rotation.z = side * Math.PI / 6;\r\n      character.add(arm);\r\n\r\n      // Hand\r\n      const hand = new THREE.Mesh(new THREE.SphereGeometry(0.06, 16, 16), armMat);\r\n      hand.position.set(side * (capsuleRadius + 0.07 + 0.28), capsuleHeight * 0.7 - 0.22, 0);\r\n      character.add(hand);\r\n    }\r\n    addArm(1);\r\n    addArm(-1);\r\n\r\n    // Legs (thin, round)\r\n    function addLeg(side = 1) {\r\n      const legMat = new THREE.MeshToonMaterial({ color: bodyColor });\r\n      const leg = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.055, 0.055, 0.48, 16),\r\n        legMat\r\n      );\r\n      leg.position.set(side * 0.13, 0.18 + 0.24, 0);\r\n      leg.rotation.x = Math.PI / 32;\r\n      character.add(leg);\r\n\r\n      // Foot\r\n      const foot = new THREE.Mesh(new THREE.SphereGeometry(0.07, 16, 16), legMat);\r\n      foot.position.set(side * 0.13, 0.18, 0.09);\r\n      character.add(foot);\r\n    }\r\n    addLeg(1);\r\n    addLeg(-1);\r\n\r\n    // Toon shading: add light gradient (simulate)\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n\r\n    // Controls (optional, can disable rotate for cartoon)\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.enablePan = false;\r\n    controls.minDistance = 2;\r\n    controls.maxDistance = 6;\r\n    controls.target.set(0, capsuleHeight * 0.7, 0);\r\n\r\n    // Animation: bounce\r\n    let reqId;\r\n    const clock = new THREE.Clock();\r\n    function animate() {\r\n      const t = clock.getElapsedTime();\r\n      character.position.y = Math.sin(t * 2.2) * 0.08;\r\n      character.rotation.y = Math.sin(t * 0.7) * 0.08;\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n      reqId = requestAnimationFrame(animate);\r\n    }\r\n    animate();\r\n\r\n    // Resize\r\n    function handleResize() {\r\n      const w = mount.clientWidth;\r\n      const h = mount.clientHeight;\r\n      camera.aspect = w / h;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(w, h);\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      cancelAnimationFrame(reqId);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      controls.dispose();\r\n      renderer.dispose();\r\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\r\n      scene.traverse((obj) => {\r\n        if (obj.isMesh) {\r\n          if (obj.geometry) obj.geometry.dispose();\r\n          if (obj.material) {\r\n            if (Array.isArray(obj.material)) obj.material.forEach((mat) => mat.dispose());\r\n            else obj.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: \"320px\", height: \"320px\" }} />;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}