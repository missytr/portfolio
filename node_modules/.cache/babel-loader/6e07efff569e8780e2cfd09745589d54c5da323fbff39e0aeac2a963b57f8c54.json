{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\my-portfolio-main\\\\src\\\\components\\\\ThreePerson.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreePerson() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const mount = mountRef.current;\n    const width = mount.clientWidth || 400;\n    const height = mount.clientHeight || 400;\n\n    // Scene & Camera\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeaf7ff);\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\n    camera.position.set(0, 1.4, 3.5);\n    camera.lookAt(0, 1.0, 0);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: false\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mount.appendChild(renderer.domElement);\n\n    // Lighting\n    const ambient = new THREE.AmbientLight(0xffffff, 0.8);\n    scene.add(ambient);\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\n    dir.position.set(2, 4, 2);\n    dir.castShadow = true;\n    dir.shadow.radius = 8;\n    dir.shadow.mapSize.width = 1024;\n    dir.shadow.mapSize.height = 1024;\n    scene.add(dir);\n\n    // Character group\n    const character = new THREE.Group();\n    scene.add(character);\n\n    // Colors\n    const bodyColor = 0x1de9b6; // turquoise\n    const capColor = 0xb39ddb; // soft purple\n    const faceColor = 0xf3eaff; // light face\n    const blushColor = 0xf8bbd0; // blush\n    const pantColor = 0x3949ab; // blue pants\n    const bootColor = 0x1de9b6; // turquoise boots\n    const bootTrimColor = 0xb39ddb; // purple trim\n    const beltColor = 0x1de9b6;\n    const beltAccentColor = 0xb39ddb;\n    const eyeColor = 0x222222;\n\n    // Torso (rounded capsule, smooth)\n    const torsoMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      roughness: 0.45,\n      metalness: 0.1\n    });\n    const torso = new THREE.Mesh(new THREE.CapsuleGeometry(0.36, 0.78, 16, 32), torsoMat);\n    torso.position.y = 0.45;\n    torso.castShadow = true;\n    character.add(torso);\n\n    // Head (sphere, face color)\n    const headMat = new THREE.MeshStandardMaterial({\n      color: faceColor,\n      roughness: 0.4\n    });\n    const head = new THREE.Mesh(new THREE.SphereGeometry(0.32, 32, 24), headMat);\n    head.position.y = 1.4;\n    head.castShadow = true;\n    character.add(head);\n\n    // Cap (soft purple, stylized)\n    const capMat = new THREE.MeshStandardMaterial({\n      color: capColor,\n      roughness: 0.3\n    });\n    const cap = new THREE.Mesh(new THREE.SphereGeometry(0.33, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2), capMat);\n    cap.position.y = 1.54;\n    character.add(cap);\n\n    // Cap brim (thicker rim)\n    const brim = new THREE.Mesh(new THREE.TorusGeometry(0.33, 0.045, 16, 32), capMat);\n    brim.position.y = 1.48;\n    brim.rotation.x = Math.PI / 2;\n    character.add(brim);\n\n    // Face blush (left/right)\n    const blushMat = new THREE.MeshStandardMaterial({\n      color: blushColor,\n      roughness: 0.5\n    });\n    const blushL = new THREE.Mesh(new THREE.SphereGeometry(0.045, 8, 8), blushMat);\n    blushL.position.set(-0.11, 1.35, 0.22);\n    character.add(blushL);\n    const blushR = blushL.clone();\n    blushR.position.x = 0.11;\n    character.add(blushR);\n\n    // Eyes (cartoon, vertical oval)\n    const eyeMat = new THREE.MeshStandardMaterial({\n      color: eyeColor\n    });\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.035, 12, 12), eyeMat);\n    leftEye.scale.y = 1.5;\n    leftEye.position.set(-0.07, 1.42, 0.25);\n    character.add(leftEye);\n    const rightEye = leftEye.clone();\n    rightEye.position.x = 0.07;\n    character.add(rightEye);\n\n    // Eyelashes (simple lines)\n    function addLash(x, y, z, angle = 0.3) {\n      const geo = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(Math.cos(angle) * 0.04, Math.sin(angle) * 0.04, 0)]);\n      const mat = new THREE.LineBasicMaterial({\n        color: eyeColor\n      });\n      const lash = new THREE.Line(geo, mat);\n      lash.position.set(x, y, z);\n      character.add(lash);\n    }\n    addLash(-0.07, 1.45, 0.25, 0.7);\n    addLash(-0.07, 1.45, 0.25, 1.2);\n    addLash(0.07, 1.45, 0.25, 2.44);\n    addLash(0.07, 1.45, 0.25, 2.0);\n\n    // Smiling mouth (arc, smooth)\n    const mouthCurve = [];\n    const mouthRadius = 0.07;\n    for (let i = 0; i <= 16; i++) {\n      const a = Math.PI * (0.25 + i / 32);\n      mouthCurve.push(new THREE.Vector3(Math.cos(a) * mouthRadius, 1.36 - Math.sin(a) * 0.03, 0.255));\n    }\n    const mouthShape = new THREE.BufferGeometry().setFromPoints(mouthCurve);\n    const mouthMat = new THREE.LineBasicMaterial({\n      color: eyeColor,\n      linewidth: 2\n    });\n    const mouth = new THREE.Line(mouthShape, mouthMat);\n    character.add(mouth);\n\n    // Arms (capsule, smooth, waving)\n    const armMat = new THREE.MeshStandardMaterial({\n      color: bodyColor,\n      roughness: 0.45\n    });\n    const arms = [];\n    function addArm(side = 1) {\n      const arm = new THREE.Mesh(new THREE.CapsuleGeometry(0.09, 0.52, 12, 24), armMat);\n      arm.position.set(side * 0.5, 0.95, 0);\n      arm.rotation.z = side * Math.PI / 7;\n      arm.castShadow = true;\n      character.add(arm);\n      arms[side === 1 ? 0 : 1] = arm; // 0: right, 1: left\n\n      // Hand (rounded)\n      const hand = new THREE.Mesh(new THREE.SphereGeometry(0.11, 16, 16), armMat);\n      hand.position.set(side * 0.5, 0.74, 0);\n      hand.castShadow = true;\n      character.add(hand);\n    }\n    addArm(1);\n    addArm(-1);\n\n    // Belt (turquoise, accent purple)\n    const beltMat = new THREE.MeshStandardMaterial({\n      color: beltColor,\n      roughness: 0.3\n    });\n    const belt = new THREE.Mesh(new THREE.TorusGeometry(0.24, 0.03, 16, 32), beltMat);\n    belt.position.y = 0.45;\n    belt.rotation.x = Math.PI / 2;\n    character.add(belt);\n\n    // Belt accent (small purple knot)\n    const beltAccentMat = new THREE.MeshStandardMaterial({\n      color: beltAccentColor,\n      roughness: 0.3\n    });\n    const beltAccent = new THREE.Mesh(new THREE.SphereGeometry(0.04, 8, 8), beltAccentMat);\n    beltAccent.position.set(0.18, 0.45, 0.08);\n    character.add(beltAccent);\n\n    // Pants (blue, short, smooth)\n    const pantMat = new THREE.MeshStandardMaterial({\n      color: pantColor,\n      roughness: 0.4\n    });\n    const pants = new THREE.Mesh(new THREE.CylinderGeometry(0.22, 0.22, 0.32, 24), pantMat);\n    pants.position.y = 0.12;\n    pants.castShadow = true;\n    character.add(pants);\n\n    // Legs (blue, slightly apart, smooth)\n    function addLeg(side = 1) {\n      const leg = new THREE.Mesh(new THREE.CylinderGeometry(0.10, 0.10, 0.32, 16), pantMat);\n      leg.position.set(side * 0.18, -0.04, 0);\n      leg.castShadow = true;\n      character.add(leg);\n\n      // Boots (turquoise, purple trim, smooth)\n      const bootMat = new THREE.MeshStandardMaterial({\n        color: bootColor,\n        roughness: 0.3\n      });\n      const boot = new THREE.Mesh(new THREE.CapsuleGeometry(0.13, 0.09, 12, 24), bootMat);\n      boot.position.set(side * 0.18, -0.20, 0.06);\n      boot.castShadow = true;\n      character.add(boot);\n\n      // Boot trim\n      const trimMat = new THREE.MeshStandardMaterial({\n        color: bootTrimColor,\n        roughness: 0.3\n      });\n      const trim = new THREE.Mesh(new THREE.TorusGeometry(0.13, 0.02, 12, 24), trimMat);\n      trim.position.set(side * 0.18, -0.12, 0.06);\n      trim.rotation.x = Math.PI / 2;\n      character.add(trim);\n    }\n    addLeg(1);\n    addLeg(-1);\n\n    // Animation: subtle bounce + waving right arm\n    const clock = new THREE.Clock();\n    let reqId;\n    function animate() {\n      const t = clock.getElapsedTime();\n      character.position.y = Math.sin(t * 2.2) * 0.06;\n      character.rotation.y = Math.sin(t * 0.7) * 0.10;\n\n      // Waving right arm (arms[0])\n      if (arms[0]) {\n        arms[0].rotation.z = Math.PI / 7 + Math.sin(t * 2.5) * 0.7;\n      }\n      // Left arm fixed\n      if (arms[1]) {\n        arms[1].rotation.z = -Math.PI / 7;\n      }\n      renderer.render(scene, camera);\n      reqId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Responsive resize\n    function handleResize() {\n      const w = mount.clientWidth || 400;\n      const h = mount.clientHeight || 400;\n      camera.aspect = w / h;\n      camera.updateProjectionMatrix();\n      renderer.setSize(w, h);\n    }\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup\n    return () => {\n      cancelAnimationFrame(reqId);\n      window.removeEventListener(\"resize\", handleResize);\n      renderer.dispose();\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\n      scene.traverse(obj => {\n        if (obj.isMesh) {\n          if (obj.geometry) obj.geometry.dispose();\n          if (obj.material) {\n            if (Array.isArray(obj.material)) obj.material.forEach(mat => mat.dispose());else obj.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: \"400px\",\n      height: \"400px\",\n      borderRadius: \"32px\",\n      boxShadow: \"0 8px 32px #90caf933\",\n      background: \"#eaf7ff\",\n      transition: \"box-shadow 0.3s\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreePerson, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreePerson;\nvar _c;\n$RefreshReg$(_c, \"ThreePerson\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","ThreePerson","_s","mountRef","mount","current","width","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","Math","min","window","devicePixelRatio","outputColorSpace","SRGBColorSpace","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","ambient","AmbientLight","add","dir","DirectionalLight","castShadow","shadow","radius","mapSize","character","Group","bodyColor","capColor","faceColor","blushColor","pantColor","bootColor","bootTrimColor","beltColor","beltAccentColor","eyeColor","torsoMat","MeshStandardMaterial","color","roughness","metalness","torso","Mesh","CapsuleGeometry","y","headMat","head","SphereGeometry","capMat","cap","PI","brim","TorusGeometry","rotation","x","blushMat","blushL","blushR","clone","eyeMat","leftEye","scale","rightEye","addLash","z","angle","geo","BufferGeometry","setFromPoints","Vector3","cos","sin","mat","LineBasicMaterial","lash","Line","mouthCurve","mouthRadius","i","a","push","mouthShape","mouthMat","linewidth","mouth","armMat","arms","addArm","side","arm","hand","beltMat","belt","beltAccentMat","beltAccent","pantMat","pants","CylinderGeometry","addLeg","leg","bootMat","boot","trimMat","trim","clock","Clock","reqId","animate","t","getElapsedTime","render","requestAnimationFrame","handleResize","w","h","aspect","updateProjectionMatrix","addEventListener","cancelAnimationFrame","removeEventListener","dispose","removeChild","traverse","obj","isMesh","geometry","material","Array","isArray","forEach","ref","style","borderRadius","boxShadow","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/my-portfolio-main/src/components/ThreePerson.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport default function ThreePerson() {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const mount = mountRef.current;\r\n    const width = mount.clientWidth || 400;\r\n    const height = mount.clientHeight || 400;\r\n\r\n    // Scene & Camera\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xeaf7ff);\r\n\r\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 100);\r\n    camera.position.set(0, 1.4, 3.5);\r\n    camera.lookAt(0, 1.0, 0);\r\n\r\n    // Renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    mount.appendChild(renderer.domElement);\r\n\r\n    // Lighting\r\n    const ambient = new THREE.AmbientLight(0xffffff, 0.8);\r\n    scene.add(ambient);\r\n\r\n    const dir = new THREE.DirectionalLight(0xffffff, 0.7);\r\n    dir.position.set(2, 4, 2);\r\n    dir.castShadow = true;\r\n    dir.shadow.radius = 8;\r\n    dir.shadow.mapSize.width = 1024;\r\n    dir.shadow.mapSize.height = 1024;\r\n    scene.add(dir);\r\n\r\n    // Character group\r\n    const character = new THREE.Group();\r\n    scene.add(character);\r\n\r\n    // Colors\r\n    const bodyColor = 0x1de9b6; // turquoise\r\n    const capColor = 0xb39ddb;  // soft purple\r\n    const faceColor = 0xf3eaff; // light face\r\n    const blushColor = 0xf8bbd0; // blush\r\n    const pantColor = 0x3949ab; // blue pants\r\n    const bootColor = 0x1de9b6; // turquoise boots\r\n    const bootTrimColor = 0xb39ddb; // purple trim\r\n    const beltColor = 0x1de9b6;\r\n    const beltAccentColor = 0xb39ddb;\r\n    const eyeColor = 0x222222;\r\n\r\n    // Torso (rounded capsule, smooth)\r\n    const torsoMat = new THREE.MeshStandardMaterial({ color: bodyColor, roughness: 0.45, metalness: 0.1 });\r\n    const torso = new THREE.Mesh(\r\n      new THREE.CapsuleGeometry(0.36, 0.78, 16, 32),\r\n      torsoMat\r\n    );\r\n    torso.position.y = 0.45;\r\n    torso.castShadow = true;\r\n    character.add(torso);\r\n\r\n    // Head (sphere, face color)\r\n    const headMat = new THREE.MeshStandardMaterial({ color: faceColor, roughness: 0.4 });\r\n    const head = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.32, 32, 24),\r\n      headMat\r\n    );\r\n    head.position.y = 1.4;\r\n    head.castShadow = true;\r\n    character.add(head);\r\n\r\n    // Cap (soft purple, stylized)\r\n    const capMat = new THREE.MeshStandardMaterial({ color: capColor, roughness: 0.3 });\r\n    const cap = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.33, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2),\r\n      capMat\r\n    );\r\n    cap.position.y = 1.54;\r\n    character.add(cap);\r\n\r\n    // Cap brim (thicker rim)\r\n    const brim = new THREE.Mesh(\r\n      new THREE.TorusGeometry(0.33, 0.045, 16, 32),\r\n      capMat\r\n    );\r\n    brim.position.y = 1.48;\r\n    brim.rotation.x = Math.PI / 2;\r\n    character.add(brim);\r\n\r\n    // Face blush (left/right)\r\n    const blushMat = new THREE.MeshStandardMaterial({ color: blushColor, roughness: 0.5 });\r\n    const blushL = new THREE.Mesh(new THREE.SphereGeometry(0.045, 8, 8), blushMat);\r\n    blushL.position.set(-0.11, 1.35, 0.22);\r\n    character.add(blushL);\r\n    const blushR = blushL.clone();\r\n    blushR.position.x = 0.11;\r\n    character.add(blushR);\r\n\r\n    // Eyes (cartoon, vertical oval)\r\n    const eyeMat = new THREE.MeshStandardMaterial({ color: eyeColor });\r\n    const leftEye = new THREE.Mesh(new THREE.SphereGeometry(0.035, 12, 12), eyeMat);\r\n    leftEye.scale.y = 1.5;\r\n    leftEye.position.set(-0.07, 1.42, 0.25);\r\n    character.add(leftEye);\r\n    const rightEye = leftEye.clone();\r\n    rightEye.position.x = 0.07;\r\n    character.add(rightEye);\r\n\r\n    // Eyelashes (simple lines)\r\n    function addLash(x, y, z, angle = 0.3) {\r\n      const geo = new THREE.BufferGeometry().setFromPoints([\r\n        new THREE.Vector3(0, 0, 0),\r\n        new THREE.Vector3(Math.cos(angle) * 0.04, Math.sin(angle) * 0.04, 0)\r\n      ]);\r\n      const mat = new THREE.LineBasicMaterial({ color: eyeColor });\r\n      const lash = new THREE.Line(geo, mat);\r\n      lash.position.set(x, y, z);\r\n      character.add(lash);\r\n    }\r\n    addLash(-0.07, 1.45, 0.25, 0.7);\r\n    addLash(-0.07, 1.45, 0.25, 1.2);\r\n    addLash(0.07, 1.45, 0.25, 2.44);\r\n    addLash(0.07, 1.45, 0.25, 2.0);\r\n\r\n    // Smiling mouth (arc, smooth)\r\n    const mouthCurve = [];\r\n    const mouthRadius = 0.07;\r\n    for (let i = 0; i <= 16; i++) {\r\n      const a = Math.PI * (0.25 + i / 32);\r\n      mouthCurve.push(\r\n        new THREE.Vector3(\r\n          Math.cos(a) * mouthRadius,\r\n          1.36 - Math.sin(a) * 0.03,\r\n          0.255\r\n        )\r\n      );\r\n    }\r\n    const mouthShape = new THREE.BufferGeometry().setFromPoints(mouthCurve);\r\n    const mouthMat = new THREE.LineBasicMaterial({ color: eyeColor, linewidth: 2 });\r\n    const mouth = new THREE.Line(mouthShape, mouthMat);\r\n    character.add(mouth);\r\n\r\n    // Arms (capsule, smooth, waving)\r\n    const armMat = new THREE.MeshStandardMaterial({ color: bodyColor, roughness: 0.45 });\r\n    const arms = [];\r\n    function addArm(side = 1) {\r\n      const arm = new THREE.Mesh(\r\n        new THREE.CapsuleGeometry(0.09, 0.52, 12, 24),\r\n        armMat\r\n      );\r\n      arm.position.set(side * 0.5, 0.95, 0);\r\n      arm.rotation.z = side * Math.PI / 7;\r\n      arm.castShadow = true;\r\n      character.add(arm);\r\n      arms[side === 1 ? 0 : 1] = arm; // 0: right, 1: left\r\n\r\n      // Hand (rounded)\r\n      const hand = new THREE.Mesh(\r\n        new THREE.SphereGeometry(0.11, 16, 16),\r\n        armMat\r\n      );\r\n      hand.position.set(side * 0.5, 0.74, 0);\r\n      hand.castShadow = true;\r\n      character.add(hand);\r\n    }\r\n    addArm(1);\r\n    addArm(-1);\r\n\r\n    // Belt (turquoise, accent purple)\r\n    const beltMat = new THREE.MeshStandardMaterial({ color: beltColor, roughness: 0.3 });\r\n    const belt = new THREE.Mesh(\r\n      new THREE.TorusGeometry(0.24, 0.03, 16, 32),\r\n      beltMat\r\n    );\r\n    belt.position.y = 0.45;\r\n    belt.rotation.x = Math.PI / 2;\r\n    character.add(belt);\r\n\r\n    // Belt accent (small purple knot)\r\n    const beltAccentMat = new THREE.MeshStandardMaterial({ color: beltAccentColor, roughness: 0.3 });\r\n    const beltAccent = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.04, 8, 8),\r\n      beltAccentMat\r\n    );\r\n    beltAccent.position.set(0.18, 0.45, 0.08);\r\n    character.add(beltAccent);\r\n\r\n    // Pants (blue, short, smooth)\r\n    const pantMat = new THREE.MeshStandardMaterial({ color: pantColor, roughness: 0.4 });\r\n    const pants = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.22, 0.22, 0.32, 24),\r\n      pantMat\r\n    );\r\n    pants.position.y = 0.12;\r\n    pants.castShadow = true;\r\n    character.add(pants);\r\n\r\n    // Legs (blue, slightly apart, smooth)\r\n    function addLeg(side = 1) {\r\n      const leg = new THREE.Mesh(\r\n        new THREE.CylinderGeometry(0.10, 0.10, 0.32, 16),\r\n        pantMat\r\n      );\r\n      leg.position.set(side * 0.18, -0.04, 0);\r\n      leg.castShadow = true;\r\n      character.add(leg);\r\n\r\n      // Boots (turquoise, purple trim, smooth)\r\n      const bootMat = new THREE.MeshStandardMaterial({ color: bootColor, roughness: 0.3 });\r\n      const boot = new THREE.Mesh(\r\n        new THREE.CapsuleGeometry(0.13, 0.09, 12, 24),\r\n        bootMat\r\n      );\r\n      boot.position.set(side * 0.18, -0.20, 0.06);\r\n      boot.castShadow = true;\r\n      character.add(boot);\r\n\r\n      // Boot trim\r\n      const trimMat = new THREE.MeshStandardMaterial({ color: bootTrimColor, roughness: 0.3 });\r\n      const trim = new THREE.Mesh(\r\n        new THREE.TorusGeometry(0.13, 0.02, 12, 24),\r\n        trimMat\r\n      );\r\n      trim.position.set(side * 0.18, -0.12, 0.06);\r\n      trim.rotation.x = Math.PI / 2;\r\n      character.add(trim);\r\n    }\r\n    addLeg(1);\r\n    addLeg(-1);\r\n\r\n    // Animation: subtle bounce + waving right arm\r\n    const clock = new THREE.Clock();\r\n    let reqId;\r\n    function animate() {\r\n      const t = clock.getElapsedTime();\r\n      character.position.y = Math.sin(t * 2.2) * 0.06;\r\n      character.rotation.y = Math.sin(t * 0.7) * 0.10;\r\n\r\n      // Waving right arm (arms[0])\r\n      if (arms[0]) {\r\n        arms[0].rotation.z = Math.PI / 7 + Math.sin(t * 2.5) * 0.7;\r\n      }\r\n      // Left arm fixed\r\n      if (arms[1]) {\r\n        arms[1].rotation.z = -Math.PI / 7;\r\n      }\r\n\r\n      renderer.render(scene, camera);\r\n      reqId = requestAnimationFrame(animate);\r\n    }\r\n    animate();\r\n\r\n    // Responsive resize\r\n    function handleResize() {\r\n      const w = mount.clientWidth || 400;\r\n      const h = mount.clientHeight || 400;\r\n      camera.aspect = w / h;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(w, h);\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      cancelAnimationFrame(reqId);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      renderer.dispose();\r\n      if (mount && renderer.domElement) mount.removeChild(renderer.domElement);\r\n      scene.traverse((obj) => {\r\n        if (obj.isMesh) {\r\n          if (obj.geometry) obj.geometry.dispose();\r\n          if (obj.material) {\r\n            if (Array.isArray(obj.material)) obj.material.forEach((mat) => mat.dispose());\r\n            else obj.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      style={{\r\n        width: \"400px\",\r\n        height: \"400px\",\r\n        borderRadius: \"32px\",\r\n        boxShadow: \"0 8px 32px #90caf933\",\r\n        background: \"#eaf7ff\",\r\n        transition: \"box-shadow 0.3s\",\r\n      }}\r\n    />\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}