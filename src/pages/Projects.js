import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import "../styles/Projects.css";

function Projects() {
  const [activeFilter, setActiveFilter] = useState('all');
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    setIsLoaded(true);
  }, []);

  const projects = [
    {
      id: 1,
      title: "Java Programming Guide",
      desc: "H∆∞·ªõng d·∫´n h·ªçc Java t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao - Gi·ªõi thi·ªáu c√∫ ph√°p, bi·∫øn, ki·ªÉu d·ªØ li·ªáu, v√≤ng l·∫∑p v√† c√°c ki·∫øn th·ª©c n·ªÅn t·∫£ng.",
      longDesc: "Series b√†i vi·∫øt v·ªÅ Java programming bao g·ªìm c√∫ ph√°p c∆° b·∫£n, OOP principles, data structures, v√† advanced topics. Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh Java.",
      tech: ["Java", "OOP", "Data Structures", "Algorithms"],
      category: "fullstack",
      img: "/img/java1.jpg",
      status: "completed",
      year: "2024",
      blogLink: "/java1",
      github: "https://github.com/example/java-guide",
      features: [
        "C√∫ ph√°p Java c∆° b·∫£n",
        "Object-Oriented Programming",
        "Data structures implementation", 
        "Algorithms v√† problem solving",
        "Best practices v√† coding standards"
      ],
      metrics: {
        users: "2,500+",
        performance: "98%",
        rating: "3.36/4"
      }
    },
    {
      id: 2,
      title: "JavaScript Fundamentals",
      desc: "C√∫ ph√°p c∆° b·∫£n JavaScript, bi·∫øn, h√†m, v√≤ng l·∫∑p v√† nguy√™n t·∫Øc l·∫≠p tr√¨nh trong JavaScript cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.",
      longDesc: "B√†i vi·∫øt chi ti·∫øt v·ªÅ JavaScript basics bao g·ªìm syntax, variables, functions, loops, DOM manipulation v√† modern ES6+ features. Ph√π h·ª£p cho beginners v√† intermediate developers.",
      tech: ["JavaScript", "ES6+", "DOM", "Async Programming"],
      category: "frontend",
      img: "/img/java1.jpg",
      status: "completed",
      year: "2024",
      blogLink: "/js1",
      github: "https://github.com/example/js-basics",
      features: [
        "JavaScript syntax c∆° b·∫£n",
        "ES6+ modern features", 
        "DOM manipulation",
        "Asynchronous programming",
        "Event handling v√† callbacks"
      ],
      metrics: {
        users: "1,800+",
        performance: "97%",
        rating: "4.8/5"
      }
    },
    {
      id: 3,
      title: "AI Content Generator",
      desc: "C√¥ng c·ª• t·∫°o n·ªôi dung t·ª± ƒë·ªông s·ª≠ d·ª•ng AI, h·ªó tr·ª£ multiple formats v√† custom templates cho marketing.",
      longDesc: "AI-powered content creation tool v·ªõi GPT integration, template customization, v√† batch processing. H·ªó tr·ª£ SEO optimization v√† multi-language content generation.",
      tech: ["Next.js", "OpenAI API", "Prisma", "PostgreSQL"],
      category: "ai",
      img: "/img/java1.jpg",
      status: "in-progress",
      year: "2024",
      github: "https://github.com/example/ai-content",
      live: "https://ai-content-demo.com",
      features: [
        "GPT-4 integration",
        "Custom templates",
        "SEO optimization",
        "Batch processing",
        "Multi-language support"
      ],
      metrics: {
        users: "500+",
        performance: "94%",
        rating: "4.9/5"
      }
    },
    {
      id: 4,
      title: "Java vs JavaScript Comparison",
      desc: "So s√°nh chi ti·∫øt gi·ªØa Java v√† JavaScript - hai ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn v·ªõi t√™n g·ªçi t∆∞∆°ng t·ª± nh∆∞ng kh√°c bi·ªát ho√†n to√†n.",
      longDesc: "B√†i vi·∫øt ph√¢n t√≠ch s√¢u v·ªÅ s·ª± kh√°c bi·ªát gi·ªØa Java v√† JavaScript, t·ª´ syntax, use cases, performance ƒë·∫øn ecosystem. Gi√∫p developers hi·ªÉu r√µ khi n√†o n√™n s·ª≠ d·ª•ng ng√¥n ng·ªØ n√†o.",
      tech: ["Java", "JavaScript", "Comparison", "Programming Languages"],
      category: "frontend",
      img: "/img/java1.jpg",
      status: "completed",
      year: "2024",
      blogLink: "/compare",
      github: "https://github.com/example/java-vs-js",
      features: [
        "Syntax comparison",
        "Performance analysis",
        "Use case scenarios",
        "Ecosystem overview",
        "Learning roadmap"
      ],
      metrics: {
        users: "1,200+",
        performance: "99%",
        rating: "4.9/5"
      }
    },
    {
      id: 5,
      title: "Restaurant Management System",
      desc: "H·ªá th·ªëng qu·∫£n l√Ω nh√† h√†ng v·ªõi POS, inventory management v√† customer analytics.",
      longDesc: "Complete restaurant management solution v·ªõi POS system, inventory tracking, staff management v√† customer analytics dashboard.",
      tech: ["Vue.js", "Laravel", "MySQL", "Redis"],
      category: "fullstack",
      img: "/img/java1.jpg",
      status: "completed",
      year: "2023",
      github: "https://github.com/example/restaurant",
      live: "https://restaurant-demo.com",
      features: [
        "POS system",
        "Inventory management",
        "Staff scheduling",
        "Customer analytics",
        "Order tracking"
      ],
      metrics: {
        users: "150+",
        performance: "97%",
        rating: "4.6/5"
      }
    },
    {
      id: 6,
      title: "Advanced Java Programming",
      desc: "H∆∞·ªõng d·∫´n Java n√¢ng cao - Collections Framework, Multithreading, Exception Handling v√† Design Patterns trong Java.",
      longDesc: "B√†i vi·∫øt chuy√™n s√¢u v·ªÅ c√°c concepts n√¢ng cao trong Java including generics, collections, concurrency, v√† enterprise patterns. D√†nh cho developers mu·ªën master Java programming.",
      tech: ["Java", "Collections", "Multithreading", "Design Patterns"],
      category: "fullstack",
      img: "/img/java1.jpg",
      status: "completed",
      year: "2024",
      blogLink: "/java2",
      github: "https://github.com/example/advanced-java",
      features: [
        "Collections Framework mastery",
        "Multithreading v√† concurrency",
        "Exception handling best practices",
        "Design patterns implementation",
        "Performance optimization"
      ],
      metrics: {
        users: "1,500+",
        performance: "96%",
        rating: "4.9/5"
      }
    },
    {
      id: 7,
      title: "JavaScript Advanced Concepts",
      desc: "JavaScript n√¢ng cao - Closures, Prototypes, Async/Await, Modules v√† c√°c advanced concepts cho experienced developers.",
      longDesc: "Deep dive v√†o c√°c advanced JavaScript topics nh∆∞ closure, prototype chain, asynchronous programming patterns, modules system v√† modern JavaScript ecosystem.",
      tech: ["JavaScript", "ES6+", "Async Programming", "Modules"],
      category: "frontend", 
      img: "/img/java1.jpg",
      status: "completed",
      year: "2024",
      blogLink: "/js2",
      github: "https://github.com/example/advanced-js",
      features: [
        "Closures v√† lexical scoping",
        "Prototype chain understanding",
        "Advanced async patterns",
        "Module systems (CommonJS, ES6)",
        "Performance optimization tips"
      ],
      metrics: {
        users: "1,100+", 
        performance: "97%",
        rating: "4.8/5"
      }
    }
  ];

  const categories = [
    { id: 'all', name: 'T·∫•t c·∫£', icon: 'üéØ', count: projects.length },
    { id: 'frontend', name: 'Frontend', icon: 'üé®', count: projects.filter(p => p.category === 'frontend').length },
    { id: 'fullstack', name: 'Full Stack', icon: '‚ö°', count: projects.filter(p => p.category === 'fullstack').length },
    { id: 'ai', name: 'AI/ML', icon: 'ü§ñ', count: projects.filter(p => p.category === 'ai').length }
  ];

  const filteredProjects = activeFilter === 'all' 
    ? projects 
    : projects.filter(project => project.category === activeFilter);

  return (
    <div className="projects-page">
      {/* Hero Section */}
      <section className="projects-hero">
        <div className="hero-background">
          <div className="floating-shapes">
            <div className="shape shape-1"></div>
            <div className="shape shape-2"></div>
            <div className="shape shape-3"></div>
            <div className="shape shape-4"></div>
          </div>
        </div>
        
        <div className="hero-content">
          <div className="hero-text">
            <h1 className="hero-title">
              <span className="title-main">D·ª± √°n c·ªßa t√¥i</span>
              <span className="title-sub">Creative Solutions & Digital Experiences</span>
            </h1>
            <p className="hero-description">
              Kh√°m ph√° nh·ªØng d·ª± √°n m√† t√¥i ƒë√£ t·∫°o ra - t·ª´ ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i ƒë·∫øn c√°c gi·∫£i ph√°p AI s√°ng t·∫°o. 
              M·ªói d·ª± √°n ƒë·ªÅu ph·∫£n √°nh ƒëam m√™ c√¥ng ngh·ªá v√† commitment v·ªÅ ch·∫•t l∆∞·ª£ng.
            </p>
            
            
          </div>
        </div>
      </section>

      {/* Filter Navigation */}
      <nav className="projects-nav">
        <div className="nav-container">
          <div className="filter-tabs">
            {categories.map(category => (
              <button
                key={category.id}
                className={`filter-tab ${activeFilter === category.id ? 'active' : ''}`}
                onClick={() => setActiveFilter(category.id)}
              >
                <span className="tab-icon">{category.icon}</span>
                <span className="tab-name">{category.name}</span>
                <span className="tab-count">{category.count}</span>
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* Projects Grid */}
      <main className="projects-main">
        <div className="projects-container">
          <div className={`projects-grid ${isLoaded ? 'loaded' : ''}`}>
            {filteredProjects.map((project, index) => (
              <ProjectCard key={project.id} project={project} index={index} />
            ))}
          </div>
          
          {filteredProjects.length === 0 && (
            <div className="empty-state">
              <span className="empty-icon">üîç</span>
              <h3>Kh√¥ng t√¨m th·∫•y d·ª± √°n</h3>
              <p>Kh√¥ng c√≥ d·ª± √°n n√†o trong danh m·ª•c n√†y.</p>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}

function ProjectCard({ project, index }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);

  return (
    <div 
      className="project-card"
      style={{ animationDelay: `${index * 0.1}s` }}
    >
      <div className="card-header">
        <div className="project-image">
          <img 
            src={project.img} 
            alt={project.title}
            onLoad={() => setImageLoaded(true)}
            className={imageLoaded ? 'loaded' : ''}
          />
          <div className="image-overlay">
            <div className="project-links">
              {project.blogLink && (
                <Link to={project.blogLink} className="project-link blog">
                  <span className="link-icon">üìñ</span>
                  <span>ƒê·ªçc b√†i vi·∫øt</span>
                </Link>
              )}
              {project.live && (
                <a href={project.live} className="project-link live" target="_blank" rel="noopener noreferrer">
                  <span className="link-icon">üåê</span>
                  <span>Live Demo</span>
                </a>
              )}
              {project.github && (
                <a href={project.github} className="project-link github" target="_blank" rel="noopener noreferrer">
                  <span className="link-icon">üìÇ</span>
                  <span>Source Code</span>
                </a>
              )}
            </div>
          </div>
          <div className="status-badge">
            <span className={`status-dot ${project.status}`}></span>
            <span className="status-text">
              {project.status === 'completed' ? 'Ho√†n th√†nh' : 'ƒêang ph√°t tri·ªÉn'}
            </span>
          </div>
        </div>
      </div>

      <div className="card-content">
        <div className="project-header">
          <h3 className="project-title">{project.title}</h3>
          <span className="project-year">{project.year}</span>
        </div>
        
        <p className="project-description">
          {isExpanded ? project.longDesc : project.desc}
        </p>
        
        {project.longDesc !== project.desc && (
          <button 
            className="expand-btn"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? 'Thu g·ªçn' : 'Xem th√™m'}
            <span className={`expand-icon ${isExpanded ? 'expanded' : ''}`}>‚Üì</span>
          </button>
        )}

        <div className="project-tech">
          {project.tech.map((tech, i) => (
            <span key={i} className="tech-badge">{tech}</span>
          ))}
        </div>

        {isExpanded && (
          <div className="project-details">
            <div className="project-features">
              <h4>T√≠nh nƒÉng n·ªïi b·∫≠t:</h4>
              <ul>
                {project.features.map((feature, i) => (
                  <li key={i}>{feature}</li>
                ))}
              </ul>
            </div>
            
            <div className="project-metrics">
              <div className="metric">
                <span className="metric-value">{project.metrics.users}</span>
                <span className="metric-label">Users</span>
              </div>
              <div className="metric">
                <span className="metric-value">{project.metrics.performance}</span>
                <span className="metric-label">Performance</span>
              </div>
              <div className="metric">
                <span className="metric-value">{project.metrics.rating}</span>
                <span className="metric-label">Rating</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default Projects;