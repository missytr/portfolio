import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import "../styles/Contact.css";

function Contact() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  const [isLoaded, setIsLoaded] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState('');
  const [formErrors, setFormErrors] = useState({});

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoaded(true);
    }, 100);
    return () => clearTimeout(timer);
  }, []);

  const validateForm = () => {
    const errors = {};
    
    if (!formData.name.trim()) {
      errors.name = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
    }
    
    if (!formData.email.trim()) {
      errors.email = 'Vui l√≤ng nh·∫≠p email';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }
    
    if (!formData.message.trim()) {
      errors.message = 'Vui l√≤ng nh·∫≠p tin nh·∫Øn';
    } else if (formData.message.trim().length < 10) {
      errors.message = 'Tin nh·∫Øn qu√° ng·∫Øn (t·ªëi thi·ªÉu 10 k√Ω t·ª±)';
    }
    
    return errors;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    
    setIsSubmitting(true);
    setFormErrors({});
    
    // Simulate form submission with more realistic timing
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setSubmitStatus('success');
      setFormData({ name: '', email: '', subject: '', message: '' });
      
      // Auto clear success message after 5 seconds
      setTimeout(() => {
        setSubmitStatus('');
      }, 5000);
      
    } catch (error) {
      setSubmitStatus('error');
      setTimeout(() => {
        setSubmitStatus('');
      }, 5000);
    } finally {
      setIsSubmitting(false);
    }
  };

  const contactInfo = [
    {
      icon: 'üìß',
      title: 'Email',
      value: 'trankhanh.linh@gmail.com',
      link: 'mailto:trankhanh.linh@gmail.com',
      description: 'G·ª≠i email cho t√¥i',
      available: '24/7'
    },
    {
      icon: 'üì±',
      title: 'ƒêi·ªán tho·∫°i',
      value: '+84 123 456 789',
      link: 'tel:+84123456789',
      description: 'G·ªçi ƒëi·ªán tr·ª±c ti·∫øp',
      available: '9:00 - 18:00'
    },
    {
      icon: 'üìç',
      title: 'ƒê·ªãa ch·ªâ',
      value: 'TP. H·ªì Ch√≠ Minh, Vi·ªát Nam',
      link: 'https://maps.google.com/?q=Ho+Chi+Minh+City',
      description: 'V·ªã tr√≠ hi·ªán t·∫°i',
      available: 'GMT+7'
    },
    {
      icon: 'üí¨',
      title: 'Zalo/WhatsApp',
      value: '+84 123 456 789',
      link: 'https://zalo.me/84123456789',
      description: 'Chat tr·ª±c ti·∫øp',
      available: 'Online'
    }
  ];

  const socialLinks = [
    {
      name: 'GitHub',
      icon: 'üíª',
      url: 'https://github.com/username',
      color: '#333',
      description: 'M√£ ngu·ªìn d·ª± √°n'
    },
    {
      name: 'LinkedIn',
      icon: 'üíº',
      url: 'https://linkedin.com/in/username',
      color: '#0077b5',
      description: 'M·∫°ng ngh·ªÅ nghi·ªáp'
    },
    {
      name: 'Facebook',
      icon: 'üìò',
      url: 'https://facebook.com/username',
      color: '#1877f2',
      description: 'Trang c√° nh√¢n'
    },
    {
      name: 'Instagram',
      icon: 'üì∑',
      url: 'https://instagram.com/username',
      color: '#e4405f',
      description: '·∫¢nh & Story'
    }
  ];

  const skills = [
    'React.js', 'Node.js', 'JavaScript', 'TypeScript', 
    'Python', 'Java', 'MongoDB', 'PostgreSQL'
  ];

  return (
    <div className="contact-page">
      {/* Hero Section */}
      <section className="contact-hero">
        <div className="hero-background">
          <div className="floating-shapes">
            <div className="shape shape-1"></div>
            <div className="shape shape-2"></div>
            <div className="shape shape-3"></div>
            <div className="shape shape-4"></div>
          </div>
        </div>
        
        <div className="hero-content">
          <div className="hero-text">
            <h1 className="hero-title">
              <span className="title-main">Li√™n h·ªá v·ªõi t√¥i</span>
              <span className="title-sub">Let's Build Something Amazing Together</span>
            </h1>
            <p className="hero-description">
              C√≥ √Ω t∆∞·ªüng d·ª± √°n? Mu·ªën h·ª£p t√°c? Ho·∫∑c ƒë∆°n gi·∫£n ch·ªâ mu·ªën tr√≤ chuy·ªán v·ªÅ c√¥ng ngh·ªá? 
              T√¥i lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n!
            </p>
            
          </div>
        </div>
      </section>

      {/* Main Content */}
      <main className="contact-main">
        <div className="contact-container">
          <div className={`contact-grid ${isLoaded ? 'loaded' : ''}`}>
            
            {/* Contact Info Section */}
            <div className="contact-info">
              <div className="info-header">
                <h2>Th√¥ng tin li√™n h·ªá</h2>
                <p>Nhi·ªÅu c√°ch ƒë·ªÉ k·∫øt n·ªëi v·ªõi t√¥i</p>
              </div>
              
              <div className="contact-methods">
                {contactInfo.map((info, index) => (
                  <div key={index} className="contact-method">
                    <div className="method-icon">{info.icon}</div>
                    <div className="method-content">
                      <h4>{info.title}</h4>
                      <a 
                        href={info.link} 
                        className="method-link"
                        target={info.link.startsWith('http') ? '_blank' : '_self'}
                        rel={info.link.startsWith('http') ? 'noopener noreferrer' : ''}
                      >
                        {info.value}
                      </a>
                      <p>{info.description}</p>
                      <span className="availability">{info.available}</span>
                    </div>
                  </div>
                ))}
              </div>

              <div className="social-section">
                <h3>Theo d√µi t√¥i</h3>
                <div className="social-links">
                  {socialLinks.map((social, index) => (
                    <a 
                      key={index}
                      href={social.url}
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                      title={`${social.name} - ${social.description}`}
                    >
                      <span className="social-icon">{social.icon}</span>
                      <div className="social-info">
                        <span className="social-name">{social.name}</span>
                        <span className="social-desc">{social.description}</span>
                      </div>
                    </a>
                  ))}
                </div>
              </div>


              {/* About Me Section */}
              <div className="about-preview">
                <div className="about-content">
                  <h3>Tr·∫ßn Kh√°nh Linh</h3>
                  <p className="role">Full-Stack Developer</p>
                  <p className="bio">
                    ƒêam m√™ c√¥ng ngh·ªá, th√≠ch kh√°m ph√° v√† s√°ng t·∫°o. 
                    Chuy√™n v·ªÅ React, Node.js v√† AI/ML.
                  </p>
                  
                  <div className="skills-preview">
                    <p className="skills-title">K·ªπ nƒÉng ch√≠nh:</p>
                    <div className="skills-tags">
                      {skills.slice(0, 4).map((skill, index) => (
                        <span key={index} className="skill-tag">{skill}</span>
                      ))}
                    </div>
                  </div>
                  
                  <Link to="/about" className="view-profile">
                    Xem h·ªì s∆° ƒë·∫ßy ƒë·ªß ‚Üí
                  </Link>
                </div>
              </div>
            </div>

            {/* Contact Form */}
            <div className="contact-form-section">
              <div className="form-header">
                <h2>G·ª≠i tin nh·∫Øn</h2>
                <p>T√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù</p>
              </div>

              <form onSubmit={handleSubmit} className="contact-form">
                <div className="form-group">
                  <label htmlFor="name">H·ªç v√† t√™n *</label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
                    className={formErrors.name ? 'error' : ''}
                    required
                  />
                  {formErrors.name && <span className="error-message">{formErrors.name}</span>}
                </div>

                <div className="form-group">
                  <label htmlFor="email">Email *</label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder="your.email@example.com"
                    className={formErrors.email ? 'error' : ''}
                    required
                  />
                  {formErrors.email && <span className="error-message">{formErrors.email}</span>}
                </div>

                <div className="form-group">
                  <label htmlFor="subject">Ch·ªß ƒë·ªÅ</label>
                  <select
                    id="subject"
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                  >
                    <option value="">Ch·ªçn ch·ªß ƒë·ªÅ</option>
                    <option value="project">üöÄ H·ª£p t√°c d·ª± √°n</option>
                    <option value="job">üíº C∆° h·ªôi vi·ªác l√†m</option>
                    <option value="consultation">üí° T∆∞ v·∫•n k·ªπ thu·∫≠t</option>
                    <option value="freelance">‚ú® Freelance Project</option>
                    <option value="mentoring">üéì Mentoring/Coaching</option>
                    <option value="other">ü§ù Kh√°c</option>
                  </select>
                </div>

                <div className="form-group">
                  <label htmlFor="message">Tin nh·∫Øn *</label>
                  <textarea
                    id="message"
                    name="message"
                    value={formData.message}
                    onChange={handleInputChange}
                    placeholder="Chia s·∫ª √Ω t∆∞·ªüng, d·ª± √°n ho·∫∑c b·∫•t k·ª≥ ƒëi·ªÅu g√¨ b·∫°n mu·ªën th·∫£o lu·∫≠n...

                      V√≠ d·ª•:
                      - M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ª± √°n
                      - Timeline v√† budget mong mu·ªën  
                      - C√¥ng ngh·ªá y√™u c·∫ßu
                      - M·ª•c ti√™u c·∫ßn ƒë·∫°t ƒë∆∞·ª£c"
                    rows="8"
                    className={formErrors.message ? 'error' : ''}
                    required
                  ></textarea>
                  {formErrors.message && <span className="error-message">{formErrors.message}</span>}
                  <div className="char-count">
                    {formData.message.length}/500 k√Ω t·ª±
                  </div>
                </div>

                <button 
                  type="submit" 
                  className={`submit-btn ${isSubmitting ? 'submitting' : ''} ${submitStatus}`}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <span className="btn-icon loading">‚è≥</span>
                      <span>ƒêang g·ª≠i...</span>
                    </>
                  ) : submitStatus === 'success' ? (
                    <>
                      <span className="btn-icon">‚úÖ</span>
                      <span>ƒê√£ g·ª≠i th√†nh c√¥ng!</span>
                    </>
                  ) : submitStatus === 'error' ? (
                    <>
                      <span className="btn-icon">‚ùå</span>
                      <span>G·ª≠i th·∫•t b·∫°i, th·ª≠ l·∫°i</span>
                    </>
                  ) : (
                    <>
                      <span className="btn-icon">üìß</span>
                      <span>G·ª≠i tin nh·∫Øn</span>
                    </>
                  )}
                </button>

                {submitStatus === 'success' && (
                  <div className="success-message">
                    <p>‚ú® C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.</p>
                  </div>
                )}
                
                {submitStatus === 'error' && (
                  <div className="error-message-box">
                    <p>‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua email.</p>
                  </div>
                )}
              </form>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

export default Contact;