import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import "../../styles/Blog/BlogPost.css";

function Java4() {
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    setIsLoaded(true);
  }, []);

  const blogData = {
    title: "Advanced Java Topics",
    subtitle:
      "Kh√°m ph√° c√°c ch·ªß ƒë·ªÅ n√¢ng cao: Multithreading, Exception Handling, Generics v√† Stream API",
    category: "Java Programming",
    author: "Tr·∫ßn Kh√°nh Linh",
    publishDate: "2024-10-18",
    tags: [
      "Java",
      "Advanced",
      "Multithreading",
      "Exceptions",
      "Generics",
      "Stream API",
    ],
    difficulty: "Advanced",
  };

  return (
    <div className={`blog-post-page ${isLoaded ? "loaded" : ""}`}>
      {/* Hero Section */}
      <div className="blog-hero">
        <div className="blog-hero-content">
          <div className="blog-breadcrumb">
            <Link to="/blog" className="breadcrumb-link">
              Blog
            </Link>
            <span className="breadcrumb-separator">‚Ä¢</span>
            <Link to="/blog?category=java" className="breadcrumb-link">
              Java
            </Link>
            <span className="breadcrumb-separator">‚Ä¢</span>
            <span className="breadcrumb-current">Advanced Java</span>
          </div>

          <div className="blog-category-badge">
            <span className="category-icon">‚òï</span>
            {blogData.category}
          </div>

          <h1 className="blog-title">{blogData.title}</h1>
          <p className="blog-subtitle">{blogData.subtitle}</p>

          <div className="blog-meta">
            <div className="meta-item">
              <span className="meta-icon">üë§</span>
              <span>{blogData.author}</span>
            </div>
            <div className="meta-item">
              <span className="meta-icon">üìÖ</span>
              <span>{new Date(blogData.publishDate).toLocaleDateString("vi-VN")}</span>
            </div>
            <div className="meta-item">
              <span className="meta-icon">‚è±Ô∏è</span>
              <span>12 ph√∫t ƒë·ªçc</span>
            </div>
            <div className="meta-item difficulty">
              <span className="meta-icon">üéØ</span>
              <span>{blogData.difficulty}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="blog-container">
        <div className="blog-sidebar">
          <div className="sidebar-section">
            <h3 className="sidebar-title">üìã M·ª•c l·ª•c</h3>
            <nav className="table-of-contents">
              <a href="#intro" className="toc-link">1. Gi·ªõi thi·ªáu</a>
              <a href="#multithreading" className="toc-link">2. Multithreading</a>
              <a href="#exceptions" className="toc-link">3. Exception Handling</a>
              <a href="#generics" className="toc-link">4. Generics</a>
              <a href="#streams" className="toc-link">5. Stream API</a>
              <a href="#summary" className="toc-link">6. T·ªïng k·∫øt</a>
            </nav>
          </div>

          <div className="sidebar-section">
            <h3 className="sidebar-title">üè∑Ô∏è Tags</h3>
            <div className="blog-tags">
              {blogData.tags.map((tag, index) => (
                <span key={index} className="blog-tag">#{tag}</span>
              ))}
            </div>
          </div>

          <div className="sidebar-section">
            <h3 className="sidebar-title">üìö B√†i vi·∫øt li√™n quan</h3>
            <div className="related-posts">
              <Link to="/blog/java2" className="related-post">
                <span className="related-icon">‚òï</span>
                <span>Java OOP</span>
              </Link>
              <Link to="/blog/java3" className="related-post">
                <span className="related-icon">‚òï</span>
                <span>Java Collections</span>
              </Link>
            </div>
          </div>
        </div>

        <article className="blog-content">
          {/* 01 */}
          <section id="intro" className="content-section">
            <h2 className="section-title">
              <span className="section-number">01</span>
              <span className="section-text">Gi·ªõi thi·ªáu v·ªÅ Advanced Java</span>
            </h2>
            <div className="section-content">
              <p className="highlight-text">
                Sau khi n·∫Øm v·ªØng Java c∆° b·∫£n, b·∫°n c·∫ßn t√¨m hi·ªÉu c√°c ch·ªß ƒë·ªÅ n√¢ng cao
                nh∆∞ ƒëa lu·ªìng, x·ª≠ l√Ω ngo·∫°i l·ªá, generics, v√† Stream API ‚Äî nh·ªØng c√¥ng
                c·ª• m·∫°nh m·∫Ω gi√∫p b·∫°n vi·∫øt m√£ linh ho·∫°t, t·ªëi ∆∞u v√† hi·ªán ƒë·∫°i h∆°n.
              </p>
            </div>
          </section>

          {/* 02 */}
          <section id="multithreading" className="content-section">
            <h2 className="section-title">
              <span className="section-number">02</span>
              <span className="section-text">Multithreading ‚Äì L·∫≠p tr√¨nh ƒëa lu·ªìng</span>
            </h2>
            <div className="section-content">
              <p>
                Multithreading cho ph√©p ch∆∞∆°ng tr√¨nh th·ª±c hi·ªán nhi·ªÅu c√¥ng vi·ªác ƒë·ªìng th·ªùi,
                t·∫≠n d·ª•ng t·ªëi ƒëa t√†i nguy√™n CPU. M·ªói ‚Äúthread‚Äù l√† m·ªôt lu·ªìng th·ª±c thi ri√™ng.
              </p>

              <div className="code-example">
                <div className="code-header">
                  <span className="code-title">Thread Example</span>
                  <span className="code-language">Java</span>
                </div>
                <pre className="code-block">{`class MyThread extends Thread {
    public void run() {
        for (int i = 0; i < 5; i++) {
            System.out.println(Thread.currentThread().getName() + " - " + i);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        MyThread t2 = new MyThread();
        t1.start();
        t2.start();
    }
}`}</pre>
              </div>

              <div className="tip-box">
                <h4>üí° G·ª£i √Ω:</h4>
                <p>D√πng `ExecutorService` thay v√¨ `Thread` ƒë·ªÉ qu·∫£n l√Ω lu·ªìng hi·ªáu qu·∫£ h∆°n.</p>
              </div>
            </div>
          </section>

          {/* 03 */}
          <section id="exceptions" className="content-section">
            <h2 className="section-title">
              <span className="section-number">03</span>
              <span className="section-text">Exception Handling ‚Äì X·ª≠ l√Ω ngo·∫°i l·ªá</span>
            </h2>
            <div className="section-content">
              <p>
                Ngo·∫°i l·ªá (Exception) x·∫£y ra khi ch∆∞∆°ng tr√¨nh g·∫∑p l·ªói trong qu√° tr√¨nh ch·∫°y.
                X·ª≠ l√Ω ngo·∫°i l·ªá gi√∫p ch∆∞∆°ng tr√¨nh kh√¥ng b·ªã d·ª´ng ƒë·ªôt ng·ªôt.
              </p>
              <div className="code-example">
                <div className="code-header">
                  <span className="code-title">Try-Catch Example</span>
                  <span className="code-language">Java</span>
                </div>
                <pre className="code-block">{`public class ExceptionExample {
    public static void main(String[] args) {
        try {
            int result = 10 / 0; // l·ªói chia cho 0
        } catch (ArithmeticException e) {
            System.out.println("L·ªói: " + e.getMessage());
        } finally {
            System.out.println("Lu√¥n ch·∫°y d√π c√≥ l·ªói hay kh√¥ng.");
        }
    }
}`}</pre>
              </div>
            </div>
          </section>

          {/* 04 */}
          <section id="generics" className="content-section">
            <h2 className="section-title">
              <span className="section-number">04</span>
              <span className="section-text">Generics ‚Äì L·∫≠p tr√¨nh t·ªïng qu√°t</span>
            </h2>
            <div className="section-content">
              <p>
                Generics gi√∫p b·∫°n vi·∫øt m√£ c√≥ th·ªÉ d√πng l·∫°i, an to√†n ki·ªÉu d·ªØ li·ªáu
                m√† kh√¥ng c·∫ßn √©p ki·ªÉu th·ªß c√¥ng.
              </p>

              <div className="code-example">
                <div className="code-header">
                  <span className="code-title">Generic Class Example</span>
                  <span className="code-language">Java</span>
                </div>
                <pre className="code-block">{`class Box<T> {
    private T value;
    public void set(T value) { this.value = value; }
    public T get() { return value; }
}

public class Main {
    public static void main(String[] args) {
        Box<Integer> intBox = new Box<>();
        intBox.set(100);
        System.out.println(intBox.get());
    }
}`}</pre>
              </div>
            </div>
          </section>

          {/* 05 */}
          <section id="streams" className="content-section">
            <h2 className="section-title">
              <span className="section-number">05</span>
              <span className="section-text">Stream API ‚Äì L·∫≠p tr√¨nh h√†m trong Java</span>
            </h2>
            <div className="section-content">
              <p>
                Stream API (Java 8+) gi√∫p x·ª≠ l√Ω t·∫≠p h·ª£p d·ªØ li·ªáu theo phong c√°ch h√†m,
                g·ªçn g√†ng v√† d·ªÖ ƒë·ªçc h∆°n.
              </p>

              <div className="code-example">
                <div className="code-header">
                  <span className="code-title">Stream Example</span>
                  <span className="code-language">Java</span>
                </div>
                <pre className="code-block">{`import java.util.Arrays;
import java.util.List;

public class StreamExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Linh", "Nam", "Hoa", "Minh");
        names.stream()
             .filter(name -> name.startsWith("H"))
             .map(String::toUpperCase)
             .forEach(System.out::println);
    }
}`}</pre>
              </div>
            </div>
          </section>

          {/* 06 */}
          <section id="summary" className="content-section">
            <h2 className="section-title">
              <span className="section-number">06</span>
              <span className="section-text">T·ªïng k·∫øt</span>
            </h2>
            <div className="section-content">
              <div className="summary-box">
                <h4>üìö B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c:</h4>
                <ul className="summary-list">
                  <li>Kh√°i ni·ªám v√† c√°ch d√πng Multithreading</li>
                  <li>C√°ch x·ª≠ l√Ω l·ªói b·∫±ng Exception Handling</li>
                  <li>Vi·∫øt code an to√†n v√† linh ho·∫°t v·ªõi Generics</li>
                  <li>S·ª≠ d·ª•ng Stream API ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu hi·ªán ƒë·∫°i</li>
                </ul>
              </div>

              <div className="next-steps">
                <h4>üöÄ B∆∞·ªõc ti·∫øp theo:</h4>
                <p>
                  H√£y t√¨m hi·ªÉu th√™m v·ªÅ Java Concurrency API, Lambda Expressions,
                  v√† Optional ƒë·ªÉ n√¢ng cao k·ªπ nƒÉng l·∫≠p tr√¨nh Java c·ªßa b·∫°n!
                </p>
              </div>
            </div>
          </section>

          <div className="blog-navigation">
            <Link to="/blog/java3" className="nav-button back-button">
              <span className="nav-icon">‚Üê</span>
              <span>Java Collections</span>
            </Link>
            <Link to="/blog/java5" className="nav-button next-button">
              <span>Java Stream API</span>
              <span className="nav-icon">‚Üí</span>
            </Link>
          </div>
        </article>
      </div>
    </div>
  );
}

export default Java4;
